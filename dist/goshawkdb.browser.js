(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("WebSocket"));
	else if(typeof define === 'function' && define.amd)
		define(["WebSocket"], factory);
	else if(typeof exports === 'object')
		exports["goshawkjs"] = factory(require("WebSocket"));
	else
		root["goshawkjs"] = factory(root["WebSocket"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_15__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 16);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {/**\n * @param {ArrayBuffer|Buffer|TypedArray} binary the binary we want to represent in hex.\n * @returns {string} a hexadecimal representation of this binary.\n */\nexports.binaryToHex = function binaryToHex(binary) {\n\tlet uintarray = null\n\tif (binary instanceof Uint8Array) {\n\t\tuintarray = binary\n\t} else {\n\t\tuintarray = new Uint8Array(toArrayBuffer(binary))\n\t}\n\treturn \"0x\" + Array.from(uintarray).map((x) => ('0' + x.toString(16)).substr(-2)).join(\"\")\n}\n\n/**\n * Tries to convert a binary value into an array buffer.\n * @param {ArrayBuffer|Buffer|TypedArray} value the value to convert.\n * @returns {ArrayBuffer}\n */\nexports.toArrayBuffer = function toArrayBuffer(value) {\n\tif (value instanceof ArrayBuffer) {\n\t\treturn value\n\t} else if (value instanceof Buffer) {\n\t\treturn value.buffer.slice(value.offset, value.offset + value.length)\n\t} else if (value instanceof ArrayBuffer === false && value.buffer && value.buffer instanceof ArrayBuffer) {\n\t\treturn value.buffer\n\t}\n\tthrow new TypeError(\"Unable to convert value to array buffer \" + value)\n}\n\n/**\n * Runs the provided function, and wraps the output or thrown error in a promise.\n * This is useful for writing code that deals with functions that may be either syncrhonous or\n * asynchronous.\n * @param {function} fn the function that will be evaluated to populate the promise.\n * @returns {Promise}\n */\nexports.asPromise = function asPromise(fn) {\n\ttry {\n\t\treturn Promise.resolve(fn())\n\t} catch (e) {\n\t\treturn Promise.reject(e)\n\t}\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).Buffer))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy91dGlscy5qcz8yZmY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcnxCdWZmZXJ8VHlwZWRBcnJheX0gYmluYXJ5IHRoZSBiaW5hcnkgd2Ugd2FudCB0byByZXByZXNlbnQgaW4gaGV4LlxuICogQHJldHVybnMge3N0cmluZ30gYSBoZXhhZGVjaW1hbCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGJpbmFyeS5cbiAqL1xuZXhwb3J0cy5iaW5hcnlUb0hleCA9IGZ1bmN0aW9uIGJpbmFyeVRvSGV4KGJpbmFyeSkge1xuXHRsZXQgdWludGFycmF5ID0gbnVsbFxuXHRpZiAoYmluYXJ5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuXHRcdHVpbnRhcnJheSA9IGJpbmFyeVxuXHR9IGVsc2Uge1xuXHRcdHVpbnRhcnJheSA9IG5ldyBVaW50OEFycmF5KHRvQXJyYXlCdWZmZXIoYmluYXJ5KSlcblx0fVxuXHRyZXR1cm4gXCIweFwiICsgQXJyYXkuZnJvbSh1aW50YXJyYXkpLm1hcCgoeCkgPT4gKCcwJyArIHgudG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpKS5qb2luKFwiXCIpXG59XG5cbi8qKlxuICogVHJpZXMgdG8gY29udmVydCBhIGJpbmFyeSB2YWx1ZSBpbnRvIGFuIGFycmF5IGJ1ZmZlci5cbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ8QnVmZmVyfFR5cGVkQXJyYXl9IHZhbHVlIHRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfVxuICovXG5leHBvcnRzLnRvQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiB0b0FycmF5QnVmZmVyKHZhbHVlKSB7XG5cdGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG5cdFx0cmV0dXJuIHZhbHVlXG5cdH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBCdWZmZXIpIHtcblx0XHRyZXR1cm4gdmFsdWUuYnVmZmVyLnNsaWNlKHZhbHVlLm9mZnNldCwgdmFsdWUub2Zmc2V0ICsgdmFsdWUubGVuZ3RoKVxuXHR9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPT09IGZhbHNlICYmIHZhbHVlLmJ1ZmZlciAmJiB2YWx1ZS5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuXHRcdHJldHVybiB2YWx1ZS5idWZmZXJcblx0fVxuXHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5hYmxlIHRvIGNvbnZlcnQgdmFsdWUgdG8gYXJyYXkgYnVmZmVyIFwiICsgdmFsdWUpXG59XG5cbi8qKlxuICogUnVucyB0aGUgcHJvdmlkZWQgZnVuY3Rpb24sIGFuZCB3cmFwcyB0aGUgb3V0cHV0IG9yIHRocm93biBlcnJvciBpbiBhIHByb21pc2UuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3Igd3JpdGluZyBjb2RlIHRoYXQgZGVhbHMgd2l0aCBmdW5jdGlvbnMgdGhhdCBtYXkgYmUgZWl0aGVyIHN5bmNyaG9ub3VzIG9yXG4gKiBhc3luY2hyb25vdXMuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV2YWx1YXRlZCB0byBwb3B1bGF0ZSB0aGUgcHJvbWlzZS5cbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5leHBvcnRzLmFzUHJvbWlzZSA9IGZ1bmN0aW9uIGFzUHJvbWlzZShmbikge1xuXHR0cnkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoZm4oKSlcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlKVxuXHR9XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvdXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 1 */
/***/ function(module, exports) {

eval("// Adds type name to inherited js errors so they behave more like the built in ones.\nexports.Throwable = class Throwable extends Error {\n\t/** @param {string} message a human readable description of this error. */\n\tconstructor(message) {\n\t\tsuper(message)\n\t\t/** the type of this error.\n\t\t * @type {string} */\n\t\tthis.name = this.constructor.name\n\t\t/** human readable description of this error.\n\t\t * @type {string} */\n\t\tthis.message = message\n\t}\n}\n\n/**\n * Thrown when a transaction should be retried, either because the user called 'retry' or because values are missing.\n */\nexports.TransactionRetryNeeded = class TransactionRetryNeeded extends exports.Throwable {}\n\n/**\n * Thrown when a user attempts to modify a value without using the appropriate methods.\n */\nexports.MutationNotAllowed = class MutationNotAllowed extends exports.Throwable {}\n\n/**\n * Thrown when a user attempts to read or write with a reference that doesn't allow it.\n */\nexports.CapabilityDenied = class CapabilityDenied extends exports.Throwable {}\n\n/**\n * Thrown when the server sends back an error because it was not able to commit the transaction.\n */\nexports.TransactionRejectedError = class TransactionRejectedError extends exports.Throwable {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9lcnJvcnMuanM/ZDZkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBZGRzIHR5cGUgbmFtZSB0byBpbmhlcml0ZWQganMgZXJyb3JzIHNvIHRoZXkgYmVoYXZlIG1vcmUgbGlrZSB0aGUgYnVpbHQgaW4gb25lcy5cbmV4cG9ydHMuVGhyb3dhYmxlID0gY2xhc3MgVGhyb3dhYmxlIGV4dGVuZHMgRXJyb3Ige1xuXHQvKiogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgYSBodW1hbiByZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGlzIGVycm9yLiAqL1xuXHRjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG5cdFx0c3VwZXIobWVzc2FnZSlcblx0XHQvKiogdGhlIHR5cGUgb2YgdGhpcyBlcnJvci5cblx0XHQgKiBAdHlwZSB7c3RyaW5nfSAqL1xuXHRcdHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZVxuXHRcdC8qKiBodW1hbiByZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGlzIGVycm9yLlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9ICovXG5cdFx0dGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuXHR9XG59XG5cbi8qKlxuICogVGhyb3duIHdoZW4gYSB0cmFuc2FjdGlvbiBzaG91bGQgYmUgcmV0cmllZCwgZWl0aGVyIGJlY2F1c2UgdGhlIHVzZXIgY2FsbGVkICdyZXRyeScgb3IgYmVjYXVzZSB2YWx1ZXMgYXJlIG1pc3NpbmcuXG4gKi9cbmV4cG9ydHMuVHJhbnNhY3Rpb25SZXRyeU5lZWRlZCA9IGNsYXNzIFRyYW5zYWN0aW9uUmV0cnlOZWVkZWQgZXh0ZW5kcyBleHBvcnRzLlRocm93YWJsZSB7fVxuXG4vKipcbiAqIFRocm93biB3aGVuIGEgdXNlciBhdHRlbXB0cyB0byBtb2RpZnkgYSB2YWx1ZSB3aXRob3V0IHVzaW5nIHRoZSBhcHByb3ByaWF0ZSBtZXRob2RzLlxuICovXG5leHBvcnRzLk11dGF0aW9uTm90QWxsb3dlZCA9IGNsYXNzIE11dGF0aW9uTm90QWxsb3dlZCBleHRlbmRzIGV4cG9ydHMuVGhyb3dhYmxlIHt9XG5cbi8qKlxuICogVGhyb3duIHdoZW4gYSB1c2VyIGF0dGVtcHRzIHRvIHJlYWQgb3Igd3JpdGUgd2l0aCBhIHJlZmVyZW5jZSB0aGF0IGRvZXNuJ3QgYWxsb3cgaXQuXG4gKi9cbmV4cG9ydHMuQ2FwYWJpbGl0eURlbmllZCA9IGNsYXNzIENhcGFiaWxpdHlEZW5pZWQgZXh0ZW5kcyBleHBvcnRzLlRocm93YWJsZSB7fVxuXG4vKipcbiAqIFRocm93biB3aGVuIHRoZSBzZXJ2ZXIgc2VuZHMgYmFjayBhbiBlcnJvciBiZWNhdXNlIGl0IHdhcyBub3QgYWJsZSB0byBjb21taXQgdGhlIHRyYW5zYWN0aW9uLlxuICovXG5leHBvcnRzLlRyYW5zYWN0aW9uUmVqZWN0ZWRFcnJvciA9IGNsYXNzIFRyYW5zYWN0aW9uUmVqZWN0ZWRFcnJvciBleHRlbmRzIGV4cG9ydHMuVGhyb3dhYmxlIHt9XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9lcnJvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/MzY5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

eval("const {binaryToHex, toArrayBuffer} = __webpack_require__(0)\n\n/**\n * A representation of a Uint64, since otherwise javascript can't do them.\n */\nclass Uint64 {\n\t/**\n\t * Makes a new Uint64 from a Uint8Array\n\t * @param {Uint8Array} uintArray an array of bytes to be used to represent this 64 bit integer.\n\t */\n\tconstructor(uintArray = new Uint8Array(8)) {\n\t\tif (uintArray instanceof Uint8Array === false) {\n\t\t\tthrow new TypeError(\"Uint64 source must be a Uint8Array, Uint64.from(bytes), Uint64.fromTypedArray, Uint64.fromArrayBuffer might suit your needs better.\")\n\t\t}\n\t\t/**\n\t\t * @private\n\t\t * @type {Uint8Array}\n\t\t */\n\t\tthis.data = uintArray\n\n\t\t/**\n\t\t * An arraybuffer representation of this value.\n\t\t * @type {ArrayBuffer}\n\t\t */\n\t\tthis.buffer = this.data.buffer\n\t}\n\n\t/**\n\t * Creates a Uint64 from bytes\n\t * @param {number[]} bytes\n\t * @returns {Uint64}\n\t */\n\tstatic from(...bytes) {\n\t\tconst result = new Uint64()\n\t\tresult.set(...bytes)\n\t\treturn result\n\t}\n\n\t/**\n\t * Creates a Uint64 from the first 8 bytes of one of the binary forms.\n\t * @param {ArrayBuffer|Buffer|TypedArray} binary\n\t * @returns {Uint64}\n\t */\n\tstatic fromBinary(binary) {\n\t\treturn Uint64.fromArrayBuffer(toArrayBuffer(binary))\n\t}\n\n\t/**\n\t * Creates a Uint64 from an array buffer. Potentially with a byte offset.\n\t * Only the first 8 bytes will be taken.\n\t * @param {ArrayBuffer} arrayBuffer\n\t * @param {number} byteOffset the starting position in the array buffer. Defaults to 0.\n\t * @returns {Uint64}\n\t */\n\tstatic fromArrayBuffer(arrayBuffer, byteOffset = 0) {\n\t\treturn new Uint64(new Uint8Array(arrayBuffer.slice(byteOffset, byteOffset + 8)))\n\t}\n\n\t/**\n\t * Modifies this Uint64 to represent the succeeding integer.  If\n\t * this represents the largest integer the Uint64 can represent, it will wrap to 0.\n\t * @returns {Uint64} this, modified Uint64.\n\t */\n\tinc() {\n\t\tfor (let idx = this.data.length - 1; idx >= 0; --idx) {\n\t\t\tthis.data[idx] += 1\n\t\t\tif (this.data[idx] != 0) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * @returns {Uint64} a copy of this Uint64.\n\t */\n\tclone() {\n\t\tconst dst = new ArrayBuffer(this.data.byteLength)\n\t\tconst uintArray = new Uint8Array(dst)\n\t\tuintArray.set(this.data)\n\t\treturn new Uint64(uintArray)\n\t}\n\n\t/**\n\t * Set the last last bytes.length bytes.\n\t * @param {number[]} bytes the bytes to set.\n\t */\n\tset(...bytes) {\n\t\tif (bytes[0] instanceof Uint64) {\n\t\t\tthis.data.set(bytes[0].data, 0)\n\t\t} else {\n\t\t\tfor (let i = 0; i < bytes.length; ++i) {\n\t\t\t\tthis.data[this.data.length - bytes.length + i] = bytes[i]\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array buffer where this Uint64 is the first 8 bytes and\n\t * the passed buffer is the subsequent bytes.\n\t * @param {ArrayBuffer|Buffer|TypedArray} buffer the subsequent bytes.\n\t * @returns {ArrayBuffer}\n\t */\n\tconcat(buffer) {\n\t\tbuffer = toArrayBuffer(buffer)\n\t\tconst result = new Uint8Array(this.data.length + buffer.byteLength)\n\t\tresult.set(this.data, 0)\n\t\tresult.set(new Uint8Array(buffer), this.data.length)\n\t\treturn result.buffer\n\t}\n\n\t/**\n\t * A string representation of this Uint64.  This string representation is for debugging purposes\n\t * and does not form part of the public API.\n\t */\n\ttoString() {\n\t\treturn binaryToHex(this.data)\n\t}\n}\n\nmodule.exports = Uint64//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy91aW50NjQuanM/NTc4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7YmluYXJ5VG9IZXgsIHRvQXJyYXlCdWZmZXJ9ID0gcmVxdWlyZSgnLi91dGlscycpXG5cbi8qKlxuICogQSByZXByZXNlbnRhdGlvbiBvZiBhIFVpbnQ2NCwgc2luY2Ugb3RoZXJ3aXNlIGphdmFzY3JpcHQgY2FuJ3QgZG8gdGhlbS5cbiAqL1xuY2xhc3MgVWludDY0IHtcblx0LyoqXG5cdCAqIE1ha2VzIGEgbmV3IFVpbnQ2NCBmcm9tIGEgVWludDhBcnJheVxuXHQgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHVpbnRBcnJheSBhbiBhcnJheSBvZiBieXRlcyB0byBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGlzIDY0IGJpdCBpbnRlZ2VyLlxuXHQgKi9cblx0Y29uc3RydWN0b3IodWludEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoOCkpIHtcblx0XHRpZiAodWludEFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSA9PT0gZmFsc2UpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJVaW50NjQgc291cmNlIG11c3QgYmUgYSBVaW50OEFycmF5LCBVaW50NjQuZnJvbShieXRlcyksIFVpbnQ2NC5mcm9tVHlwZWRBcnJheSwgVWludDY0LmZyb21BcnJheUJ1ZmZlciBtaWdodCBzdWl0IHlvdXIgbmVlZHMgYmV0dGVyLlwiKVxuXHRcdH1cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEB0eXBlIHtVaW50OEFycmF5fVxuXHRcdCAqL1xuXHRcdHRoaXMuZGF0YSA9IHVpbnRBcnJheVxuXG5cdFx0LyoqXG5cdFx0ICogQW4gYXJyYXlidWZmZXIgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB2YWx1ZS5cblx0XHQgKiBAdHlwZSB7QXJyYXlCdWZmZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5idWZmZXIgPSB0aGlzLmRhdGEuYnVmZmVyXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIFVpbnQ2NCBmcm9tIGJ5dGVzXG5cdCAqIEBwYXJhbSB7bnVtYmVyW119IGJ5dGVzXG5cdCAqIEByZXR1cm5zIHtVaW50NjR9XG5cdCAqL1xuXHRzdGF0aWMgZnJvbSguLi5ieXRlcykge1xuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50NjQoKVxuXHRcdHJlc3VsdC5zZXQoLi4uYnl0ZXMpXG5cdFx0cmV0dXJuIHJlc3VsdFxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBVaW50NjQgZnJvbSB0aGUgZmlyc3QgOCBieXRlcyBvZiBvbmUgb2YgdGhlIGJpbmFyeSBmb3Jtcy5cblx0ICogQHBhcmFtIHtBcnJheUJ1ZmZlcnxCdWZmZXJ8VHlwZWRBcnJheX0gYmluYXJ5XG5cdCAqIEByZXR1cm5zIHtVaW50NjR9XG5cdCAqL1xuXHRzdGF0aWMgZnJvbUJpbmFyeShiaW5hcnkpIHtcblx0XHRyZXR1cm4gVWludDY0LmZyb21BcnJheUJ1ZmZlcih0b0FycmF5QnVmZmVyKGJpbmFyeSkpXG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIFVpbnQ2NCBmcm9tIGFuIGFycmF5IGJ1ZmZlci4gUG90ZW50aWFsbHkgd2l0aCBhIGJ5dGUgb2Zmc2V0LlxuXHQgKiBPbmx5IHRoZSBmaXJzdCA4IGJ5dGVzIHdpbGwgYmUgdGFrZW4uXG5cdCAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBieXRlT2Zmc2V0IHRoZSBzdGFydGluZyBwb3NpdGlvbiBpbiB0aGUgYXJyYXkgYnVmZmVyLiBEZWZhdWx0cyB0byAwLlxuXHQgKiBAcmV0dXJucyB7VWludDY0fVxuXHQgKi9cblx0c3RhdGljIGZyb21BcnJheUJ1ZmZlcihhcnJheUJ1ZmZlciwgYnl0ZU9mZnNldCA9IDApIHtcblx0XHRyZXR1cm4gbmV3IFVpbnQ2NChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlci5zbGljZShieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgOCkpKVxuXHR9XG5cblx0LyoqXG5cdCAqIE1vZGlmaWVzIHRoaXMgVWludDY0IHRvIHJlcHJlc2VudCB0aGUgc3VjY2VlZGluZyBpbnRlZ2VyLiAgSWZcblx0ICogdGhpcyByZXByZXNlbnRzIHRoZSBsYXJnZXN0IGludGVnZXIgdGhlIFVpbnQ2NCBjYW4gcmVwcmVzZW50LCBpdCB3aWxsIHdyYXAgdG8gMC5cblx0ICogQHJldHVybnMge1VpbnQ2NH0gdGhpcywgbW9kaWZpZWQgVWludDY0LlxuXHQgKi9cblx0aW5jKCkge1xuXHRcdGZvciAobGV0IGlkeCA9IHRoaXMuZGF0YS5sZW5ndGggLSAxOyBpZHggPj0gMDsgLS1pZHgpIHtcblx0XHRcdHRoaXMuZGF0YVtpZHhdICs9IDFcblx0XHRcdGlmICh0aGlzLmRhdGFbaWR4XSAhPSAwKSB7XG5cdFx0XHRcdGJyZWFrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzXG5cdH1cblxuXHQvKipcblx0ICogQHJldHVybnMge1VpbnQ2NH0gYSBjb3B5IG9mIHRoaXMgVWludDY0LlxuXHQgKi9cblx0Y2xvbmUoKSB7XG5cdFx0Y29uc3QgZHN0ID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuZGF0YS5ieXRlTGVuZ3RoKVxuXHRcdGNvbnN0IHVpbnRBcnJheSA9IG5ldyBVaW50OEFycmF5KGRzdClcblx0XHR1aW50QXJyYXkuc2V0KHRoaXMuZGF0YSlcblx0XHRyZXR1cm4gbmV3IFVpbnQ2NCh1aW50QXJyYXkpXG5cdH1cblxuXHQvKipcblx0ICogU2V0IHRoZSBsYXN0IGxhc3QgYnl0ZXMubGVuZ3RoIGJ5dGVzLlxuXHQgKiBAcGFyYW0ge251bWJlcltdfSBieXRlcyB0aGUgYnl0ZXMgdG8gc2V0LlxuXHQgKi9cblx0c2V0KC4uLmJ5dGVzKSB7XG5cdFx0aWYgKGJ5dGVzWzBdIGluc3RhbmNlb2YgVWludDY0KSB7XG5cdFx0XHR0aGlzLmRhdGEuc2V0KGJ5dGVzWzBdLmRhdGEsIDApXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dGhpcy5kYXRhW3RoaXMuZGF0YS5sZW5ndGggLSBieXRlcy5sZW5ndGggKyBpXSA9IGJ5dGVzW2ldXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYW4gYXJyYXkgYnVmZmVyIHdoZXJlIHRoaXMgVWludDY0IGlzIHRoZSBmaXJzdCA4IGJ5dGVzIGFuZFxuXHQgKiB0aGUgcGFzc2VkIGJ1ZmZlciBpcyB0aGUgc3Vic2VxdWVudCBieXRlcy5cblx0ICogQHBhcmFtIHtBcnJheUJ1ZmZlcnxCdWZmZXJ8VHlwZWRBcnJheX0gYnVmZmVyIHRoZSBzdWJzZXF1ZW50IGJ5dGVzLlxuXHQgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9XG5cdCAqL1xuXHRjb25jYXQoYnVmZmVyKSB7XG5cdFx0YnVmZmVyID0gdG9BcnJheUJ1ZmZlcihidWZmZXIpXG5cdFx0Y29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhLmxlbmd0aCArIGJ1ZmZlci5ieXRlTGVuZ3RoKVxuXHRcdHJlc3VsdC5zZXQodGhpcy5kYXRhLCAwKVxuXHRcdHJlc3VsdC5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSwgdGhpcy5kYXRhLmxlbmd0aClcblx0XHRyZXR1cm4gcmVzdWx0LmJ1ZmZlclxuXHR9XG5cblx0LyoqXG5cdCAqIEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgVWludDY0LiAgVGhpcyBzdHJpbmcgcmVwcmVzZW50YXRpb24gaXMgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlc1xuXHQgKiBhbmQgZG9lcyBub3QgZm9ybSBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJLlxuXHQgKi9cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIGJpbmFyeVRvSGV4KHRoaXMuZGF0YSlcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVpbnQ2NFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3VpbnQ2NC5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

eval("const {binaryToHex} = __webpack_require__(0)\n\n/**\n * A Ref represents a pointer to an object in the database.\n * Each Ref also carries with it some capabilities that determine\n * which of the actions `read` and `write` can be done with that reference.\n *\n * You can get a Ref either by looking at the roots of the transaction,\n * creating a new object or reading it from an objects references with\n * {@link Transaction#read}.\n */\nclass Ref {\n\t/** @private */\n\tconstructor(varId, read, write) {\n\t\tif (varId instanceof Uint8Array == false) {\n\t\t\tthrow new TypeError(\"var id must be a uint8 array\")\n\t\t}\n\n\t\t/**\n\t\t * The goshawkdb id of the object this reference refers to.\n\t\t * @private\n\t\t */\n\t\tthis.varId = varId\n\n\t\t/**\n\t\t * Whether this reference can be used to read the object.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.read = read\n\t\t/**\n\t\t * Whether this reference can be used to write the object.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.write = write\n\t}\n\n\t/** @private */\n\tstatic fromCapRef(capability, varId) {\n\t\treturn new Ref(varId, capability.Read, capability.Write)\n\t}\n\n\t/** @private */\n\tstatic fromMessage(msg) {\n\t\treturn Ref.fromCapRef(msg.Capability, msg.VarId)\n\t}\n\n\t/**\n\t * Checks to see if this reference and the other reference\n\t * refer to the same object in the database.\n\t * @param {Ref} otherRef\n\t * @returns {boolean} true if the other reference points to the same object, false otherwise.\n\t */\n\tsameReferent(otherRef) {\n\t\treturn binaryToHex(this.varId) === binaryToHex(otherRef.varId)\n\t}\n\n\t/**\n\t * @returns {Ref} a new reference the same as this one, but that cannot be used to read.\n\t */\n\tdenyRead() {\n\t\treturn new Ref(this.varId, false, this.write)\n\t}\n\n\t/**\n\t * @returns {Ref} a new reference the same as this one, but that cannot be used to write.\n\t */\n\tdenyWrite() {\n\t\treturn new Ref(this.varId, this.read, false)\n\t}\n\n\t/** @returns {string} a representation of this reference.  String representations are for debug only and are not considered part of the public API. */\n\ttoString() {\n\t\treturn `{Ref ${binaryToHex(this.varId)} ${this.read ? 'r' : '-'}${this.write ? 'w' : '-'}}`\n\t}\n\n\t/** @private */\n\ttoMessage() {\n\t\treturn {VarId: this.varId.buffer, Capability: {Read: this.read, Write: this.write}}\n\t}\n}\n\nmodule.exports = Ref//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9yZWYuanM/NDU5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7YmluYXJ5VG9IZXh9ID0gcmVxdWlyZSgnLi91dGlscycpXG5cbi8qKlxuICogQSBSZWYgcmVwcmVzZW50cyBhIHBvaW50ZXIgdG8gYW4gb2JqZWN0IGluIHRoZSBkYXRhYmFzZS5cbiAqIEVhY2ggUmVmIGFsc28gY2FycmllcyB3aXRoIGl0IHNvbWUgY2FwYWJpbGl0aWVzIHRoYXQgZGV0ZXJtaW5lXG4gKiB3aGljaCBvZiB0aGUgYWN0aW9ucyBgcmVhZGAgYW5kIGB3cml0ZWAgY2FuIGJlIGRvbmUgd2l0aCB0aGF0IHJlZmVyZW5jZS5cbiAqXG4gKiBZb3UgY2FuIGdldCBhIFJlZiBlaXRoZXIgYnkgbG9va2luZyBhdCB0aGUgcm9vdHMgb2YgdGhlIHRyYW5zYWN0aW9uLFxuICogY3JlYXRpbmcgYSBuZXcgb2JqZWN0IG9yIHJlYWRpbmcgaXQgZnJvbSBhbiBvYmplY3RzIHJlZmVyZW5jZXMgd2l0aFxuICoge0BsaW5rIFRyYW5zYWN0aW9uI3JlYWR9LlxuICovXG5jbGFzcyBSZWYge1xuXHQvKiogQHByaXZhdGUgKi9cblx0Y29uc3RydWN0b3IodmFySWQsIHJlYWQsIHdyaXRlKSB7XG5cdFx0aWYgKHZhcklkIGluc3RhbmNlb2YgVWludDhBcnJheSA9PSBmYWxzZSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcInZhciBpZCBtdXN0IGJlIGEgdWludDggYXJyYXlcIilcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBUaGUgZ29zaGF3a2RiIGlkIG9mIHRoZSBvYmplY3QgdGhpcyByZWZlcmVuY2UgcmVmZXJzIHRvLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy52YXJJZCA9IHZhcklkXG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoaXMgcmVmZXJlbmNlIGNhbiBiZSB1c2VkIHRvIHJlYWQgdGhlIG9iamVjdC5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLnJlYWQgPSByZWFkXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGlzIHJlZmVyZW5jZSBjYW4gYmUgdXNlZCB0byB3cml0ZSB0aGUgb2JqZWN0LlxuXHRcdCAqIEB0eXBlIHtib29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMud3JpdGUgPSB3cml0ZVxuXHR9XG5cblx0LyoqIEBwcml2YXRlICovXG5cdHN0YXRpYyBmcm9tQ2FwUmVmKGNhcGFiaWxpdHksIHZhcklkKSB7XG5cdFx0cmV0dXJuIG5ldyBSZWYodmFySWQsIGNhcGFiaWxpdHkuUmVhZCwgY2FwYWJpbGl0eS5Xcml0ZSlcblx0fVxuXG5cdC8qKiBAcHJpdmF0ZSAqL1xuXHRzdGF0aWMgZnJvbU1lc3NhZ2UobXNnKSB7XG5cdFx0cmV0dXJuIFJlZi5mcm9tQ2FwUmVmKG1zZy5DYXBhYmlsaXR5LCBtc2cuVmFySWQpXG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIHRvIHNlZSBpZiB0aGlzIHJlZmVyZW5jZSBhbmQgdGhlIG90aGVyIHJlZmVyZW5jZVxuXHQgKiByZWZlciB0byB0aGUgc2FtZSBvYmplY3QgaW4gdGhlIGRhdGFiYXNlLlxuXHQgKiBAcGFyYW0ge1JlZn0gb3RoZXJSZWZcblx0ICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIG90aGVyIHJlZmVyZW5jZSBwb2ludHMgdG8gdGhlIHNhbWUgb2JqZWN0LCBmYWxzZSBvdGhlcndpc2UuXG5cdCAqL1xuXHRzYW1lUmVmZXJlbnQob3RoZXJSZWYpIHtcblx0XHRyZXR1cm4gYmluYXJ5VG9IZXgodGhpcy52YXJJZCkgPT09IGJpbmFyeVRvSGV4KG90aGVyUmVmLnZhcklkKVxuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHtSZWZ9IGEgbmV3IHJlZmVyZW5jZSB0aGUgc2FtZSBhcyB0aGlzIG9uZSwgYnV0IHRoYXQgY2Fubm90IGJlIHVzZWQgdG8gcmVhZC5cblx0ICovXG5cdGRlbnlSZWFkKCkge1xuXHRcdHJldHVybiBuZXcgUmVmKHRoaXMudmFySWQsIGZhbHNlLCB0aGlzLndyaXRlKVxuXHR9XG5cblx0LyoqXG5cdCAqIEByZXR1cm5zIHtSZWZ9IGEgbmV3IHJlZmVyZW5jZSB0aGUgc2FtZSBhcyB0aGlzIG9uZSwgYnV0IHRoYXQgY2Fubm90IGJlIHVzZWQgdG8gd3JpdGUuXG5cdCAqL1xuXHRkZW55V3JpdGUoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZWYodGhpcy52YXJJZCwgdGhpcy5yZWFkLCBmYWxzZSlcblx0fVxuXG5cdC8qKiBAcmV0dXJucyB7c3RyaW5nfSBhIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcmVmZXJlbmNlLiAgU3RyaW5nIHJlcHJlc2VudGF0aW9ucyBhcmUgZm9yIGRlYnVnIG9ubHkgYW5kIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJLiAqL1xuXHR0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gYHtSZWYgJHtiaW5hcnlUb0hleCh0aGlzLnZhcklkKX0gJHt0aGlzLnJlYWQgPyAncicgOiAnLSd9JHt0aGlzLndyaXRlID8gJ3cnIDogJy0nfX1gXG5cdH1cblxuXHQvKiogQHByaXZhdGUgKi9cblx0dG9NZXNzYWdlKCkge1xuXHRcdHJldHVybiB7VmFySWQ6IHRoaXMudmFySWQuYnVmZmVyLCBDYXBhYmlsaXR5OiB7UmVhZDogdGhpcy5yZWFkLCBXcml0ZTogdGhpcy53cml0ZX19XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWZcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9yZWYuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {const GosConnection = __webpack_require__(11)\n\n// Ensure that all our calls to console.debug don't cause errors.\nif (!global.console.debug) {\n\tglobal.console.debug = () => {}\n}\n\n/**\n * Goshawkdb client.\n */\nmodule.exports = class Goshawk {\n\t/**\n\t * Connects to the websocket port of a goshawkdb server.\n\t * See the [goshawkdb documentation](https://goshawkdb.io/documentation.html) for more information.\n\t *\n\t * @param {string} url the url of the websocket endpoint. e.g. wss://localhost:9999/ws\n\t * @param {*} connectionOptions in node.js, the connection options are used to make the connection.\n\t * \t\t\t\tThey are for the WS module and are defined [here](https://github.com/websockets/ws/blob/master/doc/ws.md).\n\t * \t\t\t\tThe options should include `key`, `cert` and if you don't want it to check\n\t * \t\t\t\tthe server certificates, `{rejectUnauthorized: false}`.\n\t * @return {Promise<GosConnection, Error>} A promise that resolves with a connection or rejects with an error.\n\t */\n\tstatic connect(url, connectionOptions) {\n\t\treturn new GosConnection(url).connect(connectionOptions)\n\t}\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9nb3NoYXdrLmpzPzViYWUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgR29zQ29ubmVjdGlvbiA9IHJlcXVpcmUoJy4vZ29zLWNvbm5lY3Rpb24nKVxuXG4vLyBFbnN1cmUgdGhhdCBhbGwgb3VyIGNhbGxzIHRvIGNvbnNvbGUuZGVidWcgZG9uJ3QgY2F1c2UgZXJyb3JzLlxuaWYgKCFnbG9iYWwuY29uc29sZS5kZWJ1Zykge1xuXHRnbG9iYWwuY29uc29sZS5kZWJ1ZyA9ICgpID0+IHt9XG59XG5cbi8qKlxuICogR29zaGF3a2RiIGNsaWVudC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBHb3NoYXdrIHtcblx0LyoqXG5cdCAqIENvbm5lY3RzIHRvIHRoZSB3ZWJzb2NrZXQgcG9ydCBvZiBhIGdvc2hhd2tkYiBzZXJ2ZXIuXG5cdCAqIFNlZSB0aGUgW2dvc2hhd2tkYiBkb2N1bWVudGF0aW9uXShodHRwczovL2dvc2hhd2tkYi5pby9kb2N1bWVudGF0aW9uLmh0bWwpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdXJsIHRoZSB1cmwgb2YgdGhlIHdlYnNvY2tldCBlbmRwb2ludC4gZS5nLiB3c3M6Ly9sb2NhbGhvc3Q6OTk5OS93c1xuXHQgKiBAcGFyYW0geyp9IGNvbm5lY3Rpb25PcHRpb25zIGluIG5vZGUuanMsIHRoZSBjb25uZWN0aW9uIG9wdGlvbnMgYXJlIHVzZWQgdG8gbWFrZSB0aGUgY29ubmVjdGlvbi5cblx0ICogXHRcdFx0XHRUaGV5IGFyZSBmb3IgdGhlIFdTIG1vZHVsZSBhbmQgYXJlIGRlZmluZWQgW2hlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL2Jsb2IvbWFzdGVyL2RvYy93cy5tZCkuXG5cdCAqIFx0XHRcdFx0VGhlIG9wdGlvbnMgc2hvdWxkIGluY2x1ZGUgYGtleWAsIGBjZXJ0YCBhbmQgaWYgeW91IGRvbid0IHdhbnQgaXQgdG8gY2hlY2tcblx0ICogXHRcdFx0XHR0aGUgc2VydmVyIGNlcnRpZmljYXRlcywgYHtyZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlfWAuXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8R29zQ29ubmVjdGlvbiwgRXJyb3I+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgY29ubmVjdGlvbiBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG5cdCAqL1xuXHRzdGF0aWMgY29ubmVjdCh1cmwsIGNvbm5lY3Rpb25PcHRpb25zKSB7XG5cdFx0cmV0dXJuIG5ldyBHb3NDb25uZWN0aW9uKHVybCkuY29ubmVjdChjb25uZWN0aW9uT3B0aW9ucylcblx0fVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvZ29zaGF3ay5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(8)\nvar ieee754 = __webpack_require__(9)\nvar isArray = __webpack_require__(10)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer, global) {var require;var require;!function(t){if(true)module.exports=t();else if(\"function\"==typeof define&&define.amd)define([],t);else{var r;r=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,r.msgpack=t()}}(function(){return function t(r,e,n){function i(f,u){if(!e[f]){if(!r[f]){var a=\"function\"==typeof require&&require;if(!u&&a)return require(f,!0);if(o)return o(f,!0);var s=new Error(\"Cannot find module '\"+f+\"'\");throw s.code=\"MODULE_NOT_FOUND\",s}var c=e[f]={exports:{}};r[f][0].call(c.exports,function(t){var e=r[f][1][t];return i(e?e:t)},c,c.exports,t,r,e,n)}return e[f].exports}for(var o=\"function\"==typeof require&&require,f=0;f<n.length;f++)i(n[f]);return i}({1:[function(t,r,e){e.encode=t(\"./encode\").encode,e.decode=t(\"./decode\").decode,e.Encoder=t(\"./encoder\").Encoder,e.Decoder=t(\"./decoder\").Decoder,e.createCodec=t(\"./ext\").createCodec,e.codec=t(\"./codec\").codec},{\"./codec\":10,\"./decode\":12,\"./decoder\":13,\"./encode\":15,\"./encoder\":16,\"./ext\":20}],2:[function(t,r,e){(function(Buffer){function t(t){return t&&t.isBuffer&&t}r.exports=t(\"undefined\"!=typeof Buffer&&Buffer)||t(this.Buffer)||t(\"undefined\"!=typeof window&&window.Buffer)||this.Buffer}).call(this,t(\"buffer\").Buffer)},{buffer:29}],3:[function(t,r,e){function n(t,r){for(var e=this,n=r||(r|=0),i=t.length,o=0,f=0;f<i;)o=t.charCodeAt(f++),o<128?e[n++]=o:o<2048?(e[n++]=192|o>>>6,e[n++]=128|63&o):o<55296||o>57343?(e[n++]=224|o>>>12,e[n++]=128|o>>>6&63,e[n++]=128|63&o):(o=(o-55296<<10|t.charCodeAt(f++)-56320)+65536,e[n++]=240|o>>>18,e[n++]=128|o>>>12&63,e[n++]=128|o>>>6&63,e[n++]=128|63&o);return n-r}function i(t,r,e){var n=this,i=0|r;e||(e=n.length);for(var o=\"\",f=0;i<e;)f=n[i++],f<128?o+=String.fromCharCode(f):(192===(224&f)?f=(31&f)<<6|63&n[i++]:224===(240&f)?f=(15&f)<<12|(63&n[i++])<<6|63&n[i++]:240===(248&f)&&(f=(7&f)<<18|(63&n[i++])<<12|(63&n[i++])<<6|63&n[i++]),f>=65536?(f-=65536,o+=String.fromCharCode((f>>>10)+55296,(1023&f)+56320)):o+=String.fromCharCode(f));return o}function o(t,r,e,n){var i;e||(e=0),n||0===n||(n=this.length),r||(r=0);var o=n-e;if(t===this&&e<r&&r<n)for(i=o-1;i>=0;i--)t[i+r]=this[i+e];else for(i=0;i<o;i++)t[i+r]=this[i+e];return o}e.copy=o,e.toString=i,e.write=n},{}],4:[function(t,r,e){function n(t){return new Array(t)}function i(t){if(!o.isBuffer(t)&&o.isView(t))t=o.Uint8Array.from(t);else if(o.isArrayBuffer(t))t=new Uint8Array(t);else{if(\"string\"==typeof t)return o.from.call(e,t);if(\"number\"==typeof t)throw new TypeError('\"value\" argument must not be a number')}return Array.prototype.slice.call(t)}var o=t(\"./bufferish\"),e=r.exports=n(0);e.alloc=n,e.concat=o.concat,e.from=i},{\"./bufferish\":8}],5:[function(t,r,e){function n(t){return new Buffer(t)}function i(t){if(!o.isBuffer(t)&&o.isView(t))t=o.Uint8Array.from(t);else if(o.isArrayBuffer(t))t=new Uint8Array(t);else{if(\"string\"==typeof t)return o.from.call(e,t);if(\"number\"==typeof t)throw new TypeError('\"value\" argument must not be a number')}return Buffer.from&&1!==Buffer.from.length?Buffer.from(t):new Buffer(t)}var o=t(\"./bufferish\"),Buffer=o.global,e=r.exports=o.hasBuffer?n(0):[];e.alloc=o.hasBuffer&&Buffer.alloc||n,e.concat=o.concat,e.from=i},{\"./bufferish\":8}],6:[function(t,r,e){function n(t,r,e,n){var o=a.isBuffer(this),f=a.isBuffer(t);if(o&&f)return this.copy(t,r,e,n);if(c||o||f||!a.isView(this)||!a.isView(t))return u.copy.call(this,t,r,e,n);var s=e||null!=n?i.call(this,e,n):this;return t.set(s,r),s.length}function i(t,r){var e=this.slice||!c&&this.subarray;if(e)return e.call(this,t,r);var i=a.alloc.call(this,r-t);return n.call(this,i,0,t,r),i}function o(t,r,e){var n=!s&&a.isBuffer(this)?this.toString:u.toString;return n.apply(this,arguments)}function f(t){function r(){var r=this[t]||u[t];return r.apply(this,arguments)}return r}var u=t(\"./buffer-lite\");e.copy=n,e.slice=i,e.toString=o,e.write=f(\"write\");var a=t(\"./bufferish\"),Buffer=a.global,s=a.hasBuffer&&\"TYPED_ARRAY_SUPPORT\"in Buffer,c=s&&!Buffer.TYPED_ARRAY_SUPPORT},{\"./buffer-lite\":3,\"./bufferish\":8}],7:[function(t,r,e){function n(t){return new Uint8Array(t)}function i(t){if(o.isView(t)){var r=t.byteOffset,n=t.byteLength;t=t.buffer,t.byteLength!==n&&(t.slice?t=t.slice(r,r+n):(t=new Uint8Array(t),t.byteLength!==n&&(t=Array.prototype.slice.call(t,r,r+n))))}else{if(\"string\"==typeof t)return o.from.call(e,t);if(\"number\"==typeof t)throw new TypeError('\"value\" argument must not be a number')}return new Uint8Array(t)}var o=t(\"./bufferish\"),e=r.exports=o.hasArrayBuffer?n(0):[];e.alloc=n,e.concat=o.concat,e.from=i},{\"./bufferish\":8}],8:[function(t,r,e){function n(t){return\"string\"==typeof t?u.call(this,t):a(this).from(t)}function i(t){return a(this).alloc(t)}function o(t,r){function n(t){r+=t.length}function o(t){a+=w.copy.call(t,u,a)}r||(r=0,Array.prototype.forEach.call(t,n));var f=this!==e&&this||t[0],u=i.call(f,r),a=0;return Array.prototype.forEach.call(t,o),u}function f(t){return t instanceof ArrayBuffer||E(t)}function u(t){var r=3*t.length,e=i.call(this,r),n=w.write.call(e,t);return r!==n&&(e=w.slice.call(e,0,n)),e}function a(t){return d(t)?g:y(t)?b:p(t)?v:h?g:l?b:v}function s(){return!1}function c(t,r){return t=\"[object \"+t+\"]\",function(e){return null!=e&&{}.toString.call(r?e[r]:e)===t}}var Buffer=e.global=t(\"./buffer-global\"),h=e.hasBuffer=Buffer&&!!Buffer.isBuffer,l=e.hasArrayBuffer=\"undefined\"!=typeof ArrayBuffer,p=e.isArray=t(\"isarray\");e.isArrayBuffer=l?f:s;var d=e.isBuffer=h?Buffer.isBuffer:s,y=e.isView=l?ArrayBuffer.isView||c(\"ArrayBuffer\",\"buffer\"):s;e.alloc=i,e.concat=o,e.from=n;var v=e.Array=t(\"./bufferish-array\"),g=e.Buffer=t(\"./bufferish-buffer\"),b=e.Uint8Array=t(\"./bufferish-uint8array\"),w=e.prototype=t(\"./bufferish-proto\"),E=c(\"ArrayBuffer\")},{\"./buffer-global\":2,\"./bufferish-array\":4,\"./bufferish-buffer\":5,\"./bufferish-proto\":6,\"./bufferish-uint8array\":7,isarray:34}],9:[function(t,r,e){function n(t){return this instanceof n?(this.options=t,void this.init()):new n(t)}function i(t){for(var r in t)n.prototype[r]=o(n.prototype[r],t[r])}function o(t,r){function e(){return t.apply(this,arguments),r.apply(this,arguments)}return t&&r?e:t||r}function f(t){function r(t,r){return r(t)}return t=t.slice(),function(e){return t.reduce(r,e)}}function u(t){return s(t)?f(t):t}function a(t){return new n(t)}var s=t(\"isarray\");e.createCodec=a,e.install=i,e.filter=u;var c=t(\"./bufferish\");n.prototype.init=function(){var t=this.options;return t&&t.uint8array&&(this.bufferish=c.Uint8Array),this},e.preset=a({preset:!0})},{\"./bufferish\":8,isarray:34}],10:[function(t,r,e){t(\"./read-core\"),t(\"./write-core\"),e.codec={preset:t(\"./codec-base\").preset}},{\"./codec-base\":9,\"./read-core\":22,\"./write-core\":25}],11:[function(t,r,e){function n(t){if(!(this instanceof n))return new n(t);if(t&&(this.options=t,t.codec)){var r=this.codec=t.codec;r.bufferish&&(this.bufferish=r.bufferish)}}e.DecodeBuffer=n;var i=t(\"./read-core\").preset,o=t(\"./flex-buffer\").FlexDecoder;o.mixin(n.prototype),n.prototype.codec=i,n.prototype.fetch=function(){return this.codec.decode(this)}},{\"./flex-buffer\":21,\"./read-core\":22}],12:[function(t,r,e){function n(t,r){var e=new i(r);return e.write(t),e.read()}e.decode=n;var i=t(\"./decode-buffer\").DecodeBuffer},{\"./decode-buffer\":11}],13:[function(t,r,e){function n(t){return this instanceof n?void o.call(this,t):new n(t)}e.Decoder=n;var i=t(\"event-lite\"),o=t(\"./decode-buffer\").DecodeBuffer;n.prototype=new o,i.mixin(n.prototype),n.prototype.decode=function(t){arguments.length&&this.write(t),this.flush()},n.prototype.push=function(t){this.emit(\"data\",t)},n.prototype.end=function(t){this.decode(t),this.emit(\"end\")}},{\"./decode-buffer\":11,\"event-lite\":31}],14:[function(t,r,e){function n(t){if(!(this instanceof n))return new n(t);if(t&&(this.options=t,t.codec)){var r=this.codec=t.codec;r.bufferish&&(this.bufferish=r.bufferish)}}e.EncodeBuffer=n;var i=t(\"./write-core\").preset,o=t(\"./flex-buffer\").FlexEncoder;o.mixin(n.prototype),n.prototype.codec=i,n.prototype.write=function(t){this.codec.encode(this,t)}},{\"./flex-buffer\":21,\"./write-core\":25}],15:[function(t,r,e){function n(t,r){var e=new i(r);return e.write(t),e.read()}e.encode=n;var i=t(\"./encode-buffer\").EncodeBuffer},{\"./encode-buffer\":14}],16:[function(t,r,e){function n(t){return this instanceof n?void o.call(this,t):new n(t)}e.Encoder=n;var i=t(\"event-lite\"),o=t(\"./encode-buffer\").EncodeBuffer;n.prototype=new o,i.mixin(n.prototype),n.prototype.encode=function(t){this.write(t),this.emit(\"data\",this.read())},n.prototype.end=function(t){arguments.length&&this.encode(t),this.flush(),this.emit(\"end\")}},{\"./encode-buffer\":14,\"event-lite\":31}],17:[function(t,r,e){function n(t,r){return this instanceof n?(this.buffer=i.from(t),void(this.type=r)):new n(t,r)}e.ExtBuffer=n;var i=t(\"./bufferish\")},{\"./bufferish\":8}],18:[function(t,r,e){function n(t){t.addExtPacker(14,Error,[u,i]),t.addExtPacker(1,EvalError,[u,i]),t.addExtPacker(2,RangeError,[u,i]),t.addExtPacker(3,ReferenceError,[u,i]),t.addExtPacker(4,SyntaxError,[u,i]),t.addExtPacker(5,TypeError,[u,i]),t.addExtPacker(6,URIError,[u,i]),t.addExtPacker(10,RegExp,[f,i]),t.addExtPacker(11,Boolean,[o,i]),t.addExtPacker(12,String,[o,i]),t.addExtPacker(13,Date,[Number,i]),t.addExtPacker(15,Number,[o,i]),\"undefined\"!=typeof Uint8Array&&(t.addExtPacker(17,Int8Array,c),t.addExtPacker(18,Uint8Array,c),t.addExtPacker(19,Int16Array,c),t.addExtPacker(20,Uint16Array,c),t.addExtPacker(21,Int32Array,c),t.addExtPacker(22,Uint32Array,c),t.addExtPacker(23,Float32Array,c),\"undefined\"!=typeof Float64Array&&t.addExtPacker(24,Float64Array,c),\"undefined\"!=typeof Uint8ClampedArray&&t.addExtPacker(25,Uint8ClampedArray,c),t.addExtPacker(26,ArrayBuffer,c),t.addExtPacker(29,DataView,c)),s.hasBuffer&&t.addExtPacker(27,Buffer,s.from)}function i(r){return a||(a=t(\"./encode\").encode),a(r)}function o(t){return t.valueOf()}function f(t){t=RegExp.prototype.toString.call(t).split(\"/\"),t.shift();var r=[t.pop()];return r.unshift(t.join(\"/\")),r}function u(t){var r={};for(var e in h)r[e]=t[e];return r}e.setExtPackers=n;var a,s=t(\"./bufferish\"),Buffer=s.global,c=s.Uint8Array.from,h={name:1,message:1,stack:1,columnNumber:1,fileName:1,lineNumber:1}},{\"./bufferish\":8,\"./encode\":15}],19:[function(t,r,e){function n(t){t.addExtUnpacker(14,[i,f(Error)]),t.addExtUnpacker(1,[i,f(EvalError)]),t.addExtUnpacker(2,[i,f(RangeError)]),t.addExtUnpacker(3,[i,f(ReferenceError)]),t.addExtUnpacker(4,[i,f(SyntaxError)]),t.addExtUnpacker(5,[i,f(TypeError)]),t.addExtUnpacker(6,[i,f(URIError)]),t.addExtUnpacker(10,[i,o]),t.addExtUnpacker(11,[i,u(Boolean)]),t.addExtUnpacker(12,[i,u(String)]),t.addExtUnpacker(13,[i,u(Date)]),t.addExtUnpacker(15,[i,u(Number)]),\"undefined\"!=typeof Uint8Array&&(t.addExtUnpacker(17,u(Int8Array)),t.addExtUnpacker(18,u(Uint8Array)),t.addExtUnpacker(19,[a,u(Int16Array)]),t.addExtUnpacker(20,[a,u(Uint16Array)]),t.addExtUnpacker(21,[a,u(Int32Array)]),t.addExtUnpacker(22,[a,u(Uint32Array)]),t.addExtUnpacker(23,[a,u(Float32Array)]),\"undefined\"!=typeof Float64Array&&t.addExtUnpacker(24,[a,u(Float64Array)]),\"undefined\"!=typeof Uint8ClampedArray&&t.addExtUnpacker(25,u(Uint8ClampedArray)),t.addExtUnpacker(26,a),t.addExtUnpacker(29,[a,u(DataView)])),c.hasBuffer&&t.addExtUnpacker(27,u(Buffer))}function i(r){return s||(s=t(\"./decode\").decode),s(r)}function o(t){return RegExp.apply(null,t)}function f(t){return function(r){var e=new t;for(var n in h)e[n]=r[n];return e}}function u(t){return function(r){return new t(r)}}function a(t){return new Uint8Array(t).buffer}e.setExtUnpackers=n;var s,c=t(\"./bufferish\"),Buffer=c.global,h={name:1,message:1,stack:1,columnNumber:1,fileName:1,lineNumber:1}},{\"./bufferish\":8,\"./decode\":12}],20:[function(t,r,e){t(\"./read-core\"),t(\"./write-core\"),e.createCodec=t(\"./codec-base\").createCodec},{\"./codec-base\":9,\"./read-core\":22,\"./write-core\":25}],21:[function(t,r,e){function n(){if(!(this instanceof n))return new n}function i(){if(!(this instanceof i))return new i}function o(){function t(t){var r=this.offset?p.prototype.slice.call(this.buffer,this.offset):this.buffer;this.buffer=r?t?this.bufferish.concat([r,t]):r:t,this.offset=0}function r(){for(;this.offset<this.buffer.length;){var t,r=this.offset;try{t=this.fetch()}catch(t){if(t&&t.message!=v)throw t;this.offset=r;break}this.push(t)}}function e(t){var r=this.offset,e=r+t;if(e>this.buffer.length)throw new Error(v);return this.offset=e,r}return{bufferish:p,write:t,fetch:a,flush:r,push:c,pull:h,read:s,reserve:e,offset:0}}function f(){function t(){var t=this.start;if(t<this.offset){var r=this.start=this.offset;return p.prototype.slice.call(this.buffer,t,r)}}function r(){for(;this.start<this.offset;){var t=this.fetch();t&&this.push(t)}}function e(){var t=this.buffers||(this.buffers=[]),r=t.length>1?this.bufferish.concat(t):t[0];return t.length=0,r}function n(t){var r=0|t;if(this.buffer){var e=this.buffer.length,n=0|this.offset,i=n+r;if(i<e)return this.offset=i,n;this.flush(),t=Math.max(t,Math.min(2*e,this.maxBufferSize))}return t=Math.max(t,this.minBufferSize),this.buffer=this.bufferish.alloc(t),this.start=0,this.offset=r,0}function i(t){var r=t.length;if(r>this.minBufferSize)this.flush(),this.push(t);else{var e=this.reserve(r);p.prototype.copy.call(t,this.buffer,e)}}return{bufferish:p,write:u,fetch:t,flush:r,push:c,pull:e,read:s,reserve:n,send:i,maxBufferSize:y,minBufferSize:d,offset:0,start:0}}function u(){throw new Error(\"method not implemented: write()\")}function a(){throw new Error(\"method not implemented: fetch()\")}function s(){var t=this.buffers&&this.buffers.length;return t?(this.flush(),this.pull()):this.fetch()}function c(t){var r=this.buffers||(this.buffers=[]);r.push(t)}function h(){var t=this.buffers||(this.buffers=[]);return t.shift()}function l(t){function r(r){for(var e in t)r[e]=t[e];return r}return r}e.FlexDecoder=n,e.FlexEncoder=i;var p=t(\"./bufferish\"),d=2048,y=65536,v=\"BUFFER_SHORTAGE\";n.mixin=l(o()),n.mixin(n.prototype),i.mixin=l(f()),i.mixin(i.prototype)},{\"./bufferish\":8}],22:[function(t,r,e){function n(t){function r(t){var r=s(t),n=e[r];if(!n)throw new Error(\"Invalid type: \"+(r?\"0x\"+r.toString(16):r));return n(t)}var e=c.getReadToken(t);return r}function i(){var t=this.options;return this.decode=n(t),t&&t.preset&&a.setExtUnpackers(this),this}function o(t,r){var e=this.extUnpackers||(this.extUnpackers=[]);e[t]=h.filter(r)}function f(t){function r(r){return new u(r,t)}var e=this.extUnpackers||(this.extUnpackers=[]);return e[t]||r}var u=t(\"./ext-buffer\").ExtBuffer,a=t(\"./ext-unpacker\"),s=t(\"./read-format\").readUint8,c=t(\"./read-token\"),h=t(\"./codec-base\");h.install({addExtUnpacker:o,getExtUnpacker:f,init:i}),e.preset=i.call(h.preset)},{\"./codec-base\":9,\"./ext-buffer\":17,\"./ext-unpacker\":19,\"./read-format\":23,\"./read-token\":24}],23:[function(t,r,e){function n(t){var r=k.hasArrayBuffer&&t&&t.binarraybuffer,e=t&&t.int64,n=T&&t&&t.usemap,B={map:n?o:i,array:f,str:u,bin:r?s:a,ext:c,uint8:h,uint16:p,uint32:y,uint64:g(8,e?E:b),int8:l,int16:d,int32:v,int64:g(8,e?A:w),float32:g(4,m),float64:g(8,x)};return B}function i(t,r){var e,n={},i=new Array(r),o=new Array(r),f=t.codec.decode;for(e=0;e<r;e++)i[e]=f(t),o[e]=f(t);for(e=0;e<r;e++)n[i[e]]=o[e];return n}function o(t,r){var e,n=new Map,i=new Array(r),o=new Array(r),f=t.codec.decode;for(e=0;e<r;e++)i[e]=f(t),o[e]=f(t);for(e=0;e<r;e++)n.set(i[e],o[e]);return n}function f(t,r){for(var e=new Array(r),n=t.codec.decode,i=0;i<r;i++)e[i]=n(t);return e}function u(t,r){var e=t.reserve(r),n=e+r;return _.toString.call(t.buffer,\"utf-8\",e,n)}function a(t,r){var e=t.reserve(r),n=e+r,i=_.slice.call(t.buffer,e,n);return k.from(i)}function s(t,r){var e=t.reserve(r),n=e+r,i=_.slice.call(t.buffer,e,n);return k.Uint8Array.from(i).buffer}function c(t,r){var e=t.reserve(r+1),n=t.buffer[e++],i=e+r,o=t.codec.getExtUnpacker(n);if(!o)throw new Error(\"Invalid ext type: \"+(n?\"0x\"+n.toString(16):n));var f=_.slice.call(t.buffer,e,i);return o(f)}function h(t){var r=t.reserve(1);return t.buffer[r]}function l(t){var r=t.reserve(1),e=t.buffer[r];return 128&e?e-256:e}function p(t){var r=t.reserve(2),e=t.buffer;return e[r++]<<8|e[r]}function d(t){var r=t.reserve(2),e=t.buffer,n=e[r++]<<8|e[r];return 32768&n?n-65536:n}function y(t){var r=t.reserve(4),e=t.buffer;return 16777216*e[r++]+(e[r++]<<16)+(e[r++]<<8)+e[r]}function v(t){var r=t.reserve(4),e=t.buffer;return e[r++]<<24|e[r++]<<16|e[r++]<<8|e[r]}function g(t,r){return function(e){var n=e.reserve(t);return r.call(e.buffer,n,S)}}function b(t){return new P(this,t).toNumber()}function w(t){return new R(this,t).toNumber()}function E(t){return new P(this,t)}function A(t){return new R(this,t)}function m(t){return B.read(this,t,!1,23,4)}function x(t){return B.read(this,t,!1,52,8)}var B=t(\"ieee754\"),U=t(\"int64-buffer\"),P=U.Uint64BE,R=U.Int64BE;e.getReadFormat=n,e.readUint8=h;var k=t(\"./bufferish\"),_=t(\"./bufferish-proto\"),T=\"undefined\"!=typeof Map,S=!0},{\"./bufferish\":8,\"./bufferish-proto\":6,ieee754:32,\"int64-buffer\":33}],24:[function(t,r,e){function n(t){var r=s.getReadFormat(t);return t&&t.useraw?o(r):i(r)}function i(t){var r,e=new Array(256);for(r=0;r<=127;r++)e[r]=f(r);for(r=128;r<=143;r++)e[r]=a(r-128,t.map);for(r=144;r<=159;r++)e[r]=a(r-144,t.array);for(r=160;r<=191;r++)e[r]=a(r-160,t.str);for(e[192]=f(null),e[193]=null,e[194]=f(!1),e[195]=f(!0),e[196]=u(t.uint8,t.bin),e[197]=u(t.uint16,t.bin),e[198]=u(t.uint32,t.bin),e[199]=u(t.uint8,t.ext),e[200]=u(t.uint16,t.ext),e[201]=u(t.uint32,t.ext),e[202]=t.float32,e[203]=t.float64,e[204]=t.uint8,e[205]=t.uint16,e[206]=t.uint32,e[207]=t.uint64,e[208]=t.int8,e[209]=t.int16,e[210]=t.int32,e[211]=t.int64,e[212]=a(1,t.ext),e[213]=a(2,t.ext),e[214]=a(4,t.ext),e[215]=a(8,t.ext),e[216]=a(16,t.ext),e[217]=u(t.uint8,t.str),e[218]=u(t.uint16,t.str),e[219]=u(t.uint32,t.str),e[220]=u(t.uint16,t.array),e[221]=u(t.uint32,t.array),e[222]=u(t.uint16,t.map),e[223]=u(t.uint32,t.map),r=224;r<=255;r++)e[r]=f(r-256);return e}function o(t){var r,e=i(t).slice();for(e[217]=e[196],e[218]=e[197],e[219]=e[198],r=160;r<=191;r++)e[r]=a(r-160,t.bin);return e}function f(t){return function(){return t}}function u(t,r){return function(e){var n=t(e);return r(e,n)}}function a(t,r){return function(e){return r(e,t)}}var s=t(\"./read-format\");e.getReadToken=n},{\"./read-format\":23}],25:[function(t,r,e){function n(t){function r(t,r){var n=e[typeof r];if(!n)throw new Error('Unsupported type \"'+typeof r+'\": '+r);n(t,r)}var e=s.getWriteType(t);return r}function i(){var t=this.options;return this.encode=n(t),t&&t.preset&&a.setExtPackers(this),this}function o(t,r,e){function n(r){return e&&(r=e(r)),new u(r,t)}e=c.filter(e);var i=r.name;if(i&&\"Object\"!==i){var o=this.extPackers||(this.extPackers={});o[i]=n}else{var f=this.extEncoderList||(this.extEncoderList=[]);f.unshift([r,n])}}function f(t){var r=this.extPackers||(this.extPackers={}),e=t.constructor,n=e&&e.name&&r[e.name];if(n)return n;for(var i=this.extEncoderList||(this.extEncoderList=[]),o=i.length,f=0;f<o;f++){var u=i[f];if(e===u[0])return u[1]}}var u=t(\"./ext-buffer\").ExtBuffer,a=t(\"./ext-packer\"),s=t(\"./write-type\"),c=t(\"./codec-base\");c.install({addExtPacker:o,getExtPacker:f,init:i}),e.preset=i.call(c.preset)},{\"./codec-base\":9,\"./ext-buffer\":17,\"./ext-packer\":18,\"./write-type\":27}],26:[function(t,r,e){function n(t){return t&&t.uint8array?i():m||E.hasBuffer&&t&&t.safe?f():o()}function i(){var t=o();return t[202]=c(202,4,p),t[203]=c(203,8,d),t}function o(){var t=w.slice();return t[196]=u(196),t[197]=a(197),t[198]=s(198),t[199]=u(199),t[200]=a(200),t[201]=s(201),t[202]=c(202,4,x.writeFloatBE||p,!0),t[203]=c(203,8,x.writeDoubleBE||d,!0),t[204]=u(204),t[205]=a(205),t[206]=s(206),t[207]=c(207,8,h),t[208]=u(208),t[209]=a(209),t[210]=s(210),t[211]=c(211,8,l),t[217]=u(217),t[218]=a(218),t[219]=s(219),t[220]=a(220),t[221]=s(221),t[222]=a(222),t[223]=s(223),t}function f(){var t=w.slice();return t[196]=c(196,1,Buffer.prototype.writeUInt8),t[197]=c(197,2,Buffer.prototype.writeUInt16BE),t[198]=c(198,4,Buffer.prototype.writeUInt32BE),t[199]=c(199,1,Buffer.prototype.writeUInt8),t[200]=c(200,2,Buffer.prototype.writeUInt16BE),t[201]=c(201,4,Buffer.prototype.writeUInt32BE),t[202]=c(202,4,Buffer.prototype.writeFloatBE),t[203]=c(203,8,Buffer.prototype.writeDoubleBE),t[204]=c(204,1,Buffer.prototype.writeUInt8),t[205]=c(205,2,Buffer.prototype.writeUInt16BE),t[206]=c(206,4,Buffer.prototype.writeUInt32BE),t[207]=c(207,8,h),t[208]=c(208,1,Buffer.prototype.writeInt8),t[209]=c(209,2,Buffer.prototype.writeInt16BE),t[210]=c(210,4,Buffer.prototype.writeInt32BE),t[211]=c(211,8,l),t[217]=c(217,1,Buffer.prototype.writeUInt8),t[218]=c(218,2,Buffer.prototype.writeUInt16BE),t[219]=c(219,4,Buffer.prototype.writeUInt32BE),t[220]=c(220,2,Buffer.prototype.writeUInt16BE),t[221]=c(221,4,Buffer.prototype.writeUInt32BE),t[222]=c(222,2,Buffer.prototype.writeUInt16BE),t[223]=c(223,4,Buffer.prototype.writeUInt32BE),t}function u(t){return function(r,e){var n=r.reserve(2),i=r.buffer;i[n++]=t,i[n]=e}}function a(t){return function(r,e){var n=r.reserve(3),i=r.buffer;i[n++]=t,i[n++]=e>>>8,i[n]=e}}function s(t){return function(r,e){var n=r.reserve(5),i=r.buffer;i[n++]=t,i[n++]=e>>>24,i[n++]=e>>>16,i[n++]=e>>>8,i[n]=e}}function c(t,r,e,n){return function(i,o){var f=i.reserve(r+1);i.buffer[f++]=t,e.call(i.buffer,o,f,n)}}function h(t,r){new g(this,r,t)}function l(t,r){new b(this,r,t)}function p(t,r){y.write(this,t,r,!1,23,4)}function d(t,r){y.write(this,t,r,!1,52,8)}var y=t(\"ieee754\"),v=t(\"int64-buffer\"),g=v.Uint64BE,b=v.Int64BE,w=t(\"./write-uint8\").uint8,E=t(\"./bufferish\"),Buffer=E.global,A=E.hasBuffer&&\"TYPED_ARRAY_SUPPORT\"in Buffer,m=A&&!Buffer.TYPED_ARRAY_SUPPORT,x=E.hasBuffer&&Buffer.prototype||{};e.getWriteToken=n},{\"./bufferish\":8,\"./write-uint8\":28,ieee754:32,\"int64-buffer\":33}],27:[function(t,r,e){function n(t){function r(t,r){var e=r?195:194;_[e](t,r)}function e(t,r){var e,n=0|r;return r!==n?(e=203,void _[e](t,r)):(e=-32<=n&&n<=127?255&n:0<=n?n<=255?204:n<=65535?205:206:-128<=n?208:-32768<=n?209:210,void _[e](t,n))}function n(t,r){var e=207;_[e](t,r.toArray())}function o(t,r){var e=211;_[e](t,r.toArray())}function v(t){return t<32?1:t<=255?2:t<=65535?3:5}function g(t){return t<32?1:t<=65535?3:5}function b(t){function r(r,e){var n=e.length,i=5+3*n;r.offset=r.reserve(i);var o=r.buffer,f=t(n),u=r.offset+f;n=s.write.call(o,e,u);var a=t(n);if(f!==a){var c=u+a-f,h=u+n;s.copy.call(o,o,c,u,h)}var l=1===a?160+n:a<=3?215+a:219;_[l](r,n),r.offset+=n}return r}function w(t,r){if(null===r)return A(t,r);if(I(r))return Y(t,r);if(i(r))return m(t,r);if(f.isUint64BE(r))return n(t,r);if(u.isInt64BE(r))return o(t,r);var e=t.codec.getExtPacker(r);return e&&(r=e(r)),r instanceof l?U(t,r):void D(t,r)}function E(t,r){return I(r)?k(t,r):void w(t,r)}function A(t,r){var e=192;_[e](t,r)}function m(t,r){var e=r.length,n=e<16?144+e:e<=65535?220:221;_[n](t,e);for(var i=t.codec.encode,o=0;o<e;o++)i(t,r[o])}function x(t,r){var e=r.length,n=e<255?196:e<=65535?197:198;_[n](t,e),t.send(r)}function B(t,r){x(t,new Uint8Array(r))}function U(t,r){var e=r.buffer,n=e.length,i=y[n]||(n<255?199:n<=65535?200:201);_[i](t,n),h[r.type](t),t.send(e)}function P(t,r){var e=Object.keys(r),n=e.length,i=n<16?128+n:n<=65535?222:223;_[i](t,n);var o=t.codec.encode;e.forEach(function(e){o(t,e),o(t,r[e])})}function R(t,r){if(!(r instanceof Map))return P(t,r);var e=r.size,n=e<16?128+e:e<=65535?222:223;_[n](t,e);var i=t.codec.encode;r.forEach(function(r,e,n){i(t,e),i(t,r)})}function k(t,r){var e=r.length,n=e<32?160+e:e<=65535?218:219;_[n](t,e),t.send(r)}var _=c.getWriteToken(t),T=t&&t.useraw,S=p&&t&&t.binarraybuffer,I=S?a.isArrayBuffer:a.isBuffer,Y=S?B:x,C=d&&t&&t.usemap,D=C?R:P,O={boolean:r,function:A,number:e,object:T?E:w,string:b(T?g:v),symbol:A,undefined:A};return O}var i=t(\"isarray\"),o=t(\"int64-buffer\"),f=o.Uint64BE,u=o.Int64BE,a=t(\"./bufferish\"),s=t(\"./bufferish-proto\"),c=t(\"./write-token\"),h=t(\"./write-uint8\").uint8,l=t(\"./ext-buffer\").ExtBuffer,p=\"undefined\"!=typeof Uint8Array,d=\"undefined\"!=typeof Map,y=[];y[1]=212,y[2]=213,y[4]=214,y[8]=215,y[16]=216,e.getWriteType=n},{\"./bufferish\":8,\"./bufferish-proto\":6,\"./ext-buffer\":17,\"./write-token\":26,\"./write-uint8\":28,\"int64-buffer\":33,isarray:34}],28:[function(t,r,e){function n(t){return function(r){var e=r.reserve(1);r.buffer[e]=t}}for(var i=e.uint8=new Array(256),o=0;o<=255;o++)i[o]=n(o)},{}],29:[function(t,r,e){(function(r){\"use strict\";function n(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&\"function\"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}function i(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(t,r){if(i()<r)throw new RangeError(\"Invalid typed array length\");return Buffer.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(r),t.__proto__=Buffer.prototype):(null===t&&(t=new Buffer(r)),t.length=r),t}function Buffer(t,r,e){if(!(Buffer.TYPED_ARRAY_SUPPORT||this instanceof Buffer))return new Buffer(t,r,e);if(\"number\"==typeof t){if(\"string\"==typeof r)throw new Error(\"If encoding is specified then the first argument must be a string\");return s(this,t)}return f(this,t,r,e)}function f(t,r,e,n){if(\"number\"==typeof r)throw new TypeError('\"value\" argument must not be a number');return\"undefined\"!=typeof ArrayBuffer&&r instanceof ArrayBuffer?l(t,r,e,n):\"string\"==typeof r?c(t,r,e):p(t,r)}function u(t){if(\"number\"!=typeof t)throw new TypeError('\"size\" argument must be a number');if(t<0)throw new RangeError('\"size\" argument must not be negative')}function a(t,r,e,n){return u(r),r<=0?o(t,r):void 0!==e?\"string\"==typeof n?o(t,r).fill(e,n):o(t,r).fill(e):o(t,r)}function s(t,r){if(u(r),t=o(t,r<0?0:0|d(r)),!Buffer.TYPED_ARRAY_SUPPORT)for(var e=0;e<r;++e)t[e]=0;return t}function c(t,r,e){if(\"string\"==typeof e&&\"\"!==e||(e=\"utf8\"),!Buffer.isEncoding(e))throw new TypeError('\"encoding\" must be a valid string encoding');var n=0|v(r,e);t=o(t,n);var i=t.write(r,e);return i!==n&&(t=t.slice(0,i)),t}function h(t,r){var e=r.length<0?0:0|d(r.length);t=o(t,e);for(var n=0;n<e;n+=1)t[n]=255&r[n];return t}function l(t,r,e,n){if(r.byteLength,e<0||r.byteLength<e)throw new RangeError(\"'offset' is out of bounds\");if(r.byteLength<e+(n||0))throw new RangeError(\"'length' is out of bounds\");return r=void 0===e&&void 0===n?new Uint8Array(r):void 0===n?new Uint8Array(r,e):new Uint8Array(r,e,n),Buffer.TYPED_ARRAY_SUPPORT?(t=r,t.__proto__=Buffer.prototype):t=h(t,r),t}function p(t,r){if(Buffer.isBuffer(r)){var e=0|d(r.length);return t=o(t,e),0===t.length?t:(r.copy(t,0,0,e),t)}if(r){if(\"undefined\"!=typeof ArrayBuffer&&r.buffer instanceof ArrayBuffer||\"length\"in r)return\"number\"!=typeof r.length||H(r.length)?o(t,0):h(t,r);if(\"Buffer\"===r.type&&Q(r.data))return h(t,r.data)}throw new TypeError(\"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\")}function d(t){if(t>=i())throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\"+i().toString(16)+\" bytes\");return 0|t}function y(t){return+t!=t&&(t=0),Buffer.alloc(+t)}function v(t,r){if(Buffer.isBuffer(t))return t.length;if(\"undefined\"!=typeof ArrayBuffer&&\"function\"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;\"string\"!=typeof t&&(t=\"\"+t);var e=t.length;if(0===e)return 0;for(var n=!1;;)switch(r){case\"ascii\":case\"latin1\":case\"binary\":return e;case\"utf8\":case\"utf-8\":case void 0:return q(t).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return 2*e;case\"hex\":return e>>>1;case\"base64\":return X(t).length;default:if(n)return q(t).length;r=(\"\"+r).toLowerCase(),n=!0}}function g(t,r,e){var n=!1;if((void 0===r||r<0)&&(r=0),r>this.length)return\"\";if((void 0===e||e>this.length)&&(e=this.length),e<=0)return\"\";if(e>>>=0,r>>>=0,e<=r)return\"\";for(t||(t=\"utf8\");;)switch(t){case\"hex\":return I(this,r,e);case\"utf8\":case\"utf-8\":return k(this,r,e);case\"ascii\":return T(this,r,e);case\"latin1\":case\"binary\":return S(this,r,e);case\"base64\":return R(this,r,e);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return Y(this,r,e);default:if(n)throw new TypeError(\"Unknown encoding: \"+t);t=(t+\"\").toLowerCase(),n=!0}}function b(t,r,e){var n=t[r];t[r]=t[e],t[e]=n}function w(t,r,e,n,i){if(0===t.length)return-1;if(\"string\"==typeof e?(n=e,e=0):e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e=+e,isNaN(e)&&(e=i?0:t.length-1),e<0&&(e=t.length+e),e>=t.length){if(i)return-1;e=t.length-1}else if(e<0){if(!i)return-1;e=0}if(\"string\"==typeof r&&(r=Buffer.from(r,n)),Buffer.isBuffer(r))return 0===r.length?-1:E(t,r,e,n,i);if(\"number\"==typeof r)return r=255&r,Buffer.TYPED_ARRAY_SUPPORT&&\"function\"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,r,e):Uint8Array.prototype.lastIndexOf.call(t,r,e):E(t,[r],e,n,i);throw new TypeError(\"val must be string, number or Buffer\")}function E(t,r,e,n,i){function o(t,r){return 1===f?t[r]:t.readUInt16BE(r*f)}var f=1,u=t.length,a=r.length;if(void 0!==n&&(n=String(n).toLowerCase(),\"ucs2\"===n||\"ucs-2\"===n||\"utf16le\"===n||\"utf-16le\"===n)){if(t.length<2||r.length<2)return-1;f=2,u/=2,a/=2,e/=2}var s;if(i){var c=-1;for(s=e;s<u;s++)if(o(t,s)===o(r,c===-1?0:s-c)){if(c===-1&&(c=s),s-c+1===a)return c*f}else c!==-1&&(s-=s-c),c=-1}else for(e+a>u&&(e=u-a),s=e;s>=0;s--){for(var h=!0,l=0;l<a;l++)if(o(t,s+l)!==o(r,l)){h=!1;break}if(h)return s}return-1}function A(t,r,e,n){e=Number(e)||0;var i=t.length-e;n?(n=Number(n),n>i&&(n=i)):n=i;var o=r.length;if(o%2!==0)throw new TypeError(\"Invalid hex string\");n>o/2&&(n=o/2);for(var f=0;f<n;++f){var u=parseInt(r.substr(2*f,2),16);if(isNaN(u))return f;t[e+f]=u}return f}function m(t,r,e,n){return G(q(r,t.length-e),t,e,n)}function x(t,r,e,n){return G(W(r),t,e,n)}function B(t,r,e,n){return x(t,r,e,n)}function U(t,r,e,n){return G(X(r),t,e,n)}function P(t,r,e,n){return G(J(r,t.length-e),t,e,n)}function R(t,r,e){return 0===r&&e===t.length?Z.fromByteArray(t):Z.fromByteArray(t.slice(r,e))}function k(t,r,e){e=Math.min(t.length,e);for(var n=[],i=r;i<e;){var o=t[i],f=null,u=o>239?4:o>223?3:o>191?2:1;if(i+u<=e){var a,s,c,h;switch(u){case 1:o<128&&(f=o);break;case 2:a=t[i+1],128===(192&a)&&(h=(31&o)<<6|63&a,h>127&&(f=h));break;case 3:a=t[i+1],s=t[i+2],128===(192&a)&&128===(192&s)&&(h=(15&o)<<12|(63&a)<<6|63&s,h>2047&&(h<55296||h>57343)&&(f=h));break;case 4:a=t[i+1],s=t[i+2],c=t[i+3],128===(192&a)&&128===(192&s)&&128===(192&c)&&(h=(15&o)<<18|(63&a)<<12|(63&s)<<6|63&c,h>65535&&h<1114112&&(f=h))}}null===f?(f=65533,u=1):f>65535&&(f-=65536,n.push(f>>>10&1023|55296),f=56320|1023&f),n.push(f),i+=u}return _(n)}function _(t){var r=t.length;if(r<=$)return String.fromCharCode.apply(String,t);for(var e=\"\",n=0;n<r;)e+=String.fromCharCode.apply(String,t.slice(n,n+=$));return e}function T(t,r,e){var n=\"\";e=Math.min(t.length,e);for(var i=r;i<e;++i)n+=String.fromCharCode(127&t[i]);return n}function S(t,r,e){var n=\"\";e=Math.min(t.length,e);for(var i=r;i<e;++i)n+=String.fromCharCode(t[i]);return n}function I(t,r,e){var n=t.length;(!r||r<0)&&(r=0),(!e||e<0||e>n)&&(e=n);for(var i=\"\",o=r;o<e;++o)i+=V(t[o]);return i}function Y(t,r,e){for(var n=t.slice(r,e),i=\"\",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function C(t,r,e){if(t%1!==0||t<0)throw new RangeError(\"offset is not uint\");if(t+r>e)throw new RangeError(\"Trying to access beyond buffer length\")}function D(t,r,e,n,i,o){if(!Buffer.isBuffer(t))throw new TypeError('\"buffer\" argument must be a Buffer instance');if(r>i||r<o)throw new RangeError('\"value\" argument is out of bounds');if(e+n>t.length)throw new RangeError(\"Index out of range\")}function O(t,r,e,n){r<0&&(r=65535+r+1);for(var i=0,o=Math.min(t.length-e,2);i<o;++i)t[e+i]=(r&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function L(t,r,e,n){r<0&&(r=4294967295+r+1);for(var i=0,o=Math.min(t.length-e,4);i<o;++i)t[e+i]=r>>>8*(n?i:3-i)&255}function M(t,r,e,n,i,o){if(e+n>t.length)throw new RangeError(\"Index out of range\");if(e<0)throw new RangeError(\"Index out of range\")}function N(t,r,e,n,i){return i||M(t,r,e,4,3.4028234663852886e38,-3.4028234663852886e38),K.write(t,r,e,n,23,4),e+4}function F(t,r,e,n,i){return i||M(t,r,e,8,1.7976931348623157e308,-1.7976931348623157e308),K.write(t,r,e,n,52,8),e+8}function j(t){\n  if(t=z(t).replace(tt,\"\"),t.length<2)return\"\";for(;t.length%4!==0;)t+=\"=\";return t}function z(t){return t.trim?t.trim():t.replace(/^\\s+|\\s+$/g,\"\")}function V(t){return t<16?\"0\"+t.toString(16):t.toString(16)}function q(t,r){r=r||1/0;for(var e,n=t.length,i=null,o=[],f=0;f<n;++f){if(e=t.charCodeAt(f),e>55295&&e<57344){if(!i){if(e>56319){(r-=3)>-1&&o.push(239,191,189);continue}if(f+1===n){(r-=3)>-1&&o.push(239,191,189);continue}i=e;continue}if(e<56320){(r-=3)>-1&&o.push(239,191,189),i=e;continue}e=(i-55296<<10|e-56320)+65536}else i&&(r-=3)>-1&&o.push(239,191,189);if(i=null,e<128){if((r-=1)<0)break;o.push(e)}else if(e<2048){if((r-=2)<0)break;o.push(e>>6|192,63&e|128)}else if(e<65536){if((r-=3)<0)break;o.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<1114112))throw new Error(\"Invalid code point\");if((r-=4)<0)break;o.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return o}function W(t){for(var r=[],e=0;e<t.length;++e)r.push(255&t.charCodeAt(e));return r}function J(t,r){for(var e,n,i,o=[],f=0;f<t.length&&!((r-=2)<0);++f)e=t.charCodeAt(f),n=e>>8,i=e%256,o.push(i),o.push(n);return o}function X(t){return Z.toByteArray(j(t))}function G(t,r,e,n){for(var i=0;i<n&&!(i+e>=r.length||i>=t.length);++i)r[i+e]=t[i];return i}function H(t){return t!==t}var Z=t(\"base64-js\"),K=t(\"ieee754\"),Q=t(\"isarray\");e.Buffer=Buffer,e.SlowBuffer=y,e.INSPECT_MAX_BYTES=50,Buffer.TYPED_ARRAY_SUPPORT=void 0!==r.TYPED_ARRAY_SUPPORT?r.TYPED_ARRAY_SUPPORT:n(),e.kMaxLength=i(),Buffer.poolSize=8192,Buffer._augment=function(t){return t.__proto__=Buffer.prototype,t},Buffer.from=function(t,r,e){return f(null,t,r,e)},Buffer.TYPED_ARRAY_SUPPORT&&(Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,\"undefined\"!=typeof Symbol&&Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0})),Buffer.alloc=function(t,r,e){return a(null,t,r,e)},Buffer.allocUnsafe=function(t){return s(null,t)},Buffer.allocUnsafeSlow=function(t){return s(null,t)},Buffer.isBuffer=function(t){return!(null==t||!t._isBuffer)},Buffer.compare=function(t,r){if(!Buffer.isBuffer(t)||!Buffer.isBuffer(r))throw new TypeError(\"Arguments must be Buffers\");if(t===r)return 0;for(var e=t.length,n=r.length,i=0,o=Math.min(e,n);i<o;++i)if(t[i]!==r[i]){e=t[i],n=r[i];break}return e<n?-1:n<e?1:0},Buffer.isEncoding=function(t){switch(String(t).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},Buffer.concat=function(t,r){if(!Q(t))throw new TypeError('\"list\" argument must be an Array of Buffers');if(0===t.length)return Buffer.alloc(0);var e;if(void 0===r)for(r=0,e=0;e<t.length;++e)r+=t[e].length;var n=Buffer.allocUnsafe(r),i=0;for(e=0;e<t.length;++e){var o=t[e];if(!Buffer.isBuffer(o))throw new TypeError('\"list\" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},Buffer.byteLength=v,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function(){var t=this.length;if(t%2!==0)throw new RangeError(\"Buffer size must be a multiple of 16-bits\");for(var r=0;r<t;r+=2)b(this,r,r+1);return this},Buffer.prototype.swap32=function(){var t=this.length;if(t%4!==0)throw new RangeError(\"Buffer size must be a multiple of 32-bits\");for(var r=0;r<t;r+=4)b(this,r,r+3),b(this,r+1,r+2);return this},Buffer.prototype.swap64=function(){var t=this.length;if(t%8!==0)throw new RangeError(\"Buffer size must be a multiple of 64-bits\");for(var r=0;r<t;r+=8)b(this,r,r+7),b(this,r+1,r+6),b(this,r+2,r+5),b(this,r+3,r+4);return this},Buffer.prototype.toString=function(){var t=0|this.length;return 0===t?\"\":0===arguments.length?k(this,0,t):g.apply(this,arguments)},Buffer.prototype.equals=function(t){if(!Buffer.isBuffer(t))throw new TypeError(\"Argument must be a Buffer\");return this===t||0===Buffer.compare(this,t)},Buffer.prototype.inspect=function(){var t=\"\",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString(\"hex\",0,r).match(/.{2}/g).join(\" \"),this.length>r&&(t+=\" ... \")),\"<Buffer \"+t+\">\"},Buffer.prototype.compare=function(t,r,e,n,i){if(!Buffer.isBuffer(t))throw new TypeError(\"Argument must be a Buffer\");if(void 0===r&&(r=0),void 0===e&&(e=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),r<0||e>t.length||n<0||i>this.length)throw new RangeError(\"out of range index\");if(n>=i&&r>=e)return 0;if(n>=i)return-1;if(r>=e)return 1;if(r>>>=0,e>>>=0,n>>>=0,i>>>=0,this===t)return 0;for(var o=i-n,f=e-r,u=Math.min(o,f),a=this.slice(n,i),s=t.slice(r,e),c=0;c<u;++c)if(a[c]!==s[c]){o=a[c],f=s[c];break}return o<f?-1:f<o?1:0},Buffer.prototype.includes=function(t,r,e){return this.indexOf(t,r,e)!==-1},Buffer.prototype.indexOf=function(t,r,e){return w(this,t,r,e,!0)},Buffer.prototype.lastIndexOf=function(t,r,e){return w(this,t,r,e,!1)},Buffer.prototype.write=function(t,r,e,n){if(void 0===r)n=\"utf8\",e=this.length,r=0;else if(void 0===e&&\"string\"==typeof r)n=r,e=this.length,r=0;else{if(!isFinite(r))throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");r=0|r,isFinite(e)?(e=0|e,void 0===n&&(n=\"utf8\")):(n=e,e=void 0)}var i=this.length-r;if((void 0===e||e>i)&&(e=i),t.length>0&&(e<0||r<0)||r>this.length)throw new RangeError(\"Attempt to write outside buffer bounds\");n||(n=\"utf8\");for(var o=!1;;)switch(n){case\"hex\":return A(this,t,r,e);case\"utf8\":case\"utf-8\":return m(this,t,r,e);case\"ascii\":return x(this,t,r,e);case\"latin1\":case\"binary\":return B(this,t,r,e);case\"base64\":return U(this,t,r,e);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return P(this,t,r,e);default:if(o)throw new TypeError(\"Unknown encoding: \"+n);n=(\"\"+n).toLowerCase(),o=!0}},Buffer.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}};var $=4096;Buffer.prototype.slice=function(t,r){var e=this.length;t=~~t,r=void 0===r?e:~~r,t<0?(t+=e,t<0&&(t=0)):t>e&&(t=e),r<0?(r+=e,r<0&&(r=0)):r>e&&(r=e),r<t&&(r=t);var n;if(Buffer.TYPED_ARRAY_SUPPORT)n=this.subarray(t,r),n.__proto__=Buffer.prototype;else{var i=r-t;n=new Buffer(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},Buffer.prototype.readUIntLE=function(t,r,e){t=0|t,r=0|r,e||C(t,r,this.length);for(var n=this[t],i=1,o=0;++o<r&&(i*=256);)n+=this[t+o]*i;return n},Buffer.prototype.readUIntBE=function(t,r,e){t=0|t,r=0|r,e||C(t,r,this.length);for(var n=this[t+--r],i=1;r>0&&(i*=256);)n+=this[t+--r]*i;return n},Buffer.prototype.readUInt8=function(t,r){return r||C(t,1,this.length),this[t]},Buffer.prototype.readUInt16LE=function(t,r){return r||C(t,2,this.length),this[t]|this[t+1]<<8},Buffer.prototype.readUInt16BE=function(t,r){return r||C(t,2,this.length),this[t]<<8|this[t+1]},Buffer.prototype.readUInt32LE=function(t,r){return r||C(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},Buffer.prototype.readUInt32BE=function(t,r){return r||C(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},Buffer.prototype.readIntLE=function(t,r,e){t=0|t,r=0|r,e||C(t,r,this.length);for(var n=this[t],i=1,o=0;++o<r&&(i*=256);)n+=this[t+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*r)),n},Buffer.prototype.readIntBE=function(t,r,e){t=0|t,r=0|r,e||C(t,r,this.length);for(var n=r,i=1,o=this[t+--n];n>0&&(i*=256);)o+=this[t+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*r)),o},Buffer.prototype.readInt8=function(t,r){return r||C(t,1,this.length),128&this[t]?(255-this[t]+1)*-1:this[t]},Buffer.prototype.readInt16LE=function(t,r){r||C(t,2,this.length);var e=this[t]|this[t+1]<<8;return 32768&e?4294901760|e:e},Buffer.prototype.readInt16BE=function(t,r){r||C(t,2,this.length);var e=this[t+1]|this[t]<<8;return 32768&e?4294901760|e:e},Buffer.prototype.readInt32LE=function(t,r){return r||C(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},Buffer.prototype.readInt32BE=function(t,r){return r||C(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},Buffer.prototype.readFloatLE=function(t,r){return r||C(t,4,this.length),K.read(this,t,!0,23,4)},Buffer.prototype.readFloatBE=function(t,r){return r||C(t,4,this.length),K.read(this,t,!1,23,4)},Buffer.prototype.readDoubleLE=function(t,r){return r||C(t,8,this.length),K.read(this,t,!0,52,8)},Buffer.prototype.readDoubleBE=function(t,r){return r||C(t,8,this.length),K.read(this,t,!1,52,8)},Buffer.prototype.writeUIntLE=function(t,r,e,n){if(t=+t,r=0|r,e=0|e,!n){var i=Math.pow(2,8*e)-1;D(this,t,r,e,i,0)}var o=1,f=0;for(this[r]=255&t;++f<e&&(o*=256);)this[r+f]=t/o&255;return r+e},Buffer.prototype.writeUIntBE=function(t,r,e,n){if(t=+t,r=0|r,e=0|e,!n){var i=Math.pow(2,8*e)-1;D(this,t,r,e,i,0)}var o=e-1,f=1;for(this[r+o]=255&t;--o>=0&&(f*=256);)this[r+o]=t/f&255;return r+e},Buffer.prototype.writeUInt8=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,1,255,0),Buffer.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[r]=255&t,r+1},Buffer.prototype.writeUInt16LE=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[r]=255&t,this[r+1]=t>>>8):O(this,t,r,!0),r+2},Buffer.prototype.writeUInt16BE=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[r]=t>>>8,this[r+1]=255&t):O(this,t,r,!1),r+2},Buffer.prototype.writeUInt32LE=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[r+3]=t>>>24,this[r+2]=t>>>16,this[r+1]=t>>>8,this[r]=255&t):L(this,t,r,!0),r+4},Buffer.prototype.writeUInt32BE=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=255&t):L(this,t,r,!1),r+4},Buffer.prototype.writeIntLE=function(t,r,e,n){if(t=+t,r=0|r,!n){var i=Math.pow(2,8*e-1);D(this,t,r,e,i-1,-i)}var o=0,f=1,u=0;for(this[r]=255&t;++o<e&&(f*=256);)t<0&&0===u&&0!==this[r+o-1]&&(u=1),this[r+o]=(t/f>>0)-u&255;return r+e},Buffer.prototype.writeIntBE=function(t,r,e,n){if(t=+t,r=0|r,!n){var i=Math.pow(2,8*e-1);D(this,t,r,e,i-1,-i)}var o=e-1,f=1,u=0;for(this[r+o]=255&t;--o>=0&&(f*=256);)t<0&&0===u&&0!==this[r+o+1]&&(u=1),this[r+o]=(t/f>>0)-u&255;return r+e},Buffer.prototype.writeInt8=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,1,127,-128),Buffer.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[r]=255&t,r+1},Buffer.prototype.writeInt16LE=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[r]=255&t,this[r+1]=t>>>8):O(this,t,r,!0),r+2},Buffer.prototype.writeInt16BE=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[r]=t>>>8,this[r+1]=255&t):O(this,t,r,!1),r+2},Buffer.prototype.writeInt32LE=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,4,2147483647,-2147483648),Buffer.TYPED_ARRAY_SUPPORT?(this[r]=255&t,this[r+1]=t>>>8,this[r+2]=t>>>16,this[r+3]=t>>>24):L(this,t,r,!0),r+4},Buffer.prototype.writeInt32BE=function(t,r,e){return t=+t,r=0|r,e||D(this,t,r,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),Buffer.TYPED_ARRAY_SUPPORT?(this[r]=t>>>24,this[r+1]=t>>>16,this[r+2]=t>>>8,this[r+3]=255&t):L(this,t,r,!1),r+4},Buffer.prototype.writeFloatLE=function(t,r,e){return N(this,t,r,!0,e)},Buffer.prototype.writeFloatBE=function(t,r,e){return N(this,t,r,!1,e)},Buffer.prototype.writeDoubleLE=function(t,r,e){return F(this,t,r,!0,e)},Buffer.prototype.writeDoubleBE=function(t,r,e){return F(this,t,r,!1,e)},Buffer.prototype.copy=function(t,r,e,n){if(e||(e=0),n||0===n||(n=this.length),r>=t.length&&(r=t.length),r||(r=0),n>0&&n<e&&(n=e),n===e)return 0;if(0===t.length||0===this.length)return 0;if(r<0)throw new RangeError(\"targetStart out of bounds\");if(e<0||e>=this.length)throw new RangeError(\"sourceStart out of bounds\");if(n<0)throw new RangeError(\"sourceEnd out of bounds\");n>this.length&&(n=this.length),t.length-r<n-e&&(n=t.length-r+e);var i,o=n-e;if(this===t&&e<r&&r<n)for(i=o-1;i>=0;--i)t[i+r]=this[i+e];else if(o<1e3||!Buffer.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+r]=this[i+e];else Uint8Array.prototype.set.call(t,this.subarray(e,e+o),r);return o},Buffer.prototype.fill=function(t,r,e,n){if(\"string\"==typeof t){if(\"string\"==typeof r?(n=r,r=0,e=this.length):\"string\"==typeof e&&(n=e,e=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==n&&\"string\"!=typeof n)throw new TypeError(\"encoding must be a string\");if(\"string\"==typeof n&&!Buffer.isEncoding(n))throw new TypeError(\"Unknown encoding: \"+n)}else\"number\"==typeof t&&(t=255&t);if(r<0||this.length<r||this.length<e)throw new RangeError(\"Out of range index\");if(e<=r)return this;r>>>=0,e=void 0===e?this.length:e>>>0,t||(t=0);var o;if(\"number\"==typeof t)for(o=r;o<e;++o)this[o]=t;else{var f=Buffer.isBuffer(t)?t:q(new Buffer(t,n).toString()),u=f.length;for(o=0;o<e-r;++o)this[o+r]=f[o%u]}return this};var tt=/[^+\\/0-9A-Za-z-_]/g}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{\"base64-js\":30,ieee754:32,isarray:34}],30:[function(t,r,e){\"use strict\";function n(t){var r=t.length;if(r%4>0)throw new Error(\"Invalid string. Length must be a multiple of 4\");return\"=\"===t[r-2]?2:\"=\"===t[r-1]?1:0}function i(t){return 3*t.length/4-n(t)}function o(t){var r,e,i,o,f,u,a=t.length;f=n(t),u=new h(3*a/4-f),i=f>0?a-4:a;var s=0;for(r=0,e=0;r<i;r+=4,e+=3)o=c[t.charCodeAt(r)]<<18|c[t.charCodeAt(r+1)]<<12|c[t.charCodeAt(r+2)]<<6|c[t.charCodeAt(r+3)],u[s++]=o>>16&255,u[s++]=o>>8&255,u[s++]=255&o;return 2===f?(o=c[t.charCodeAt(r)]<<2|c[t.charCodeAt(r+1)]>>4,u[s++]=255&o):1===f&&(o=c[t.charCodeAt(r)]<<10|c[t.charCodeAt(r+1)]<<4|c[t.charCodeAt(r+2)]>>2,u[s++]=o>>8&255,u[s++]=255&o),u}function f(t){return s[t>>18&63]+s[t>>12&63]+s[t>>6&63]+s[63&t]}function u(t,r,e){for(var n,i=[],o=r;o<e;o+=3)n=(t[o]<<16)+(t[o+1]<<8)+t[o+2],i.push(f(n));return i.join(\"\")}function a(t){for(var r,e=t.length,n=e%3,i=\"\",o=[],f=16383,a=0,c=e-n;a<c;a+=f)o.push(u(t,a,a+f>c?c:a+f));return 1===n?(r=t[e-1],i+=s[r>>2],i+=s[r<<4&63],i+=\"==\"):2===n&&(r=(t[e-2]<<8)+t[e-1],i+=s[r>>10],i+=s[r>>4&63],i+=s[r<<2&63],i+=\"=\"),o.push(i),o.join(\"\")}e.byteLength=i,e.toByteArray=o,e.fromByteArray=a;for(var s=[],c=[],h=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,l=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",p=0,d=l.length;p<d;++p)s[p]=l[p],c[l.charCodeAt(p)]=p;c[\"-\".charCodeAt(0)]=62,c[\"_\".charCodeAt(0)]=63},{}],31:[function(t,r,e){function n(){if(!(this instanceof n))return new n}!function(t){function e(t){for(var r in s)t[r]=s[r];return t}function n(t,r){return u(this,t).push(r),this}function i(t,r){function e(){o.call(n,t,e),r.apply(this,arguments)}var n=this;return e.originalListener=r,u(n,t).push(e),n}function o(t,r){function e(t){return t!==r&&t.originalListener!==r}var n,i=this;if(arguments.length){if(r){if(n=u(i,t,!0)){if(n=n.filter(e),!n.length)return o.call(i,t);i[a][t]=n}}else if(n=i[a],n&&(delete n[t],!Object.keys(n).length))return o.call(i)}else delete i[a];return i}function f(t,r){function e(t){t.call(o)}function n(t){t.call(o,r)}function i(t){t.apply(o,s)}var o=this,f=u(o,t,!0);if(!f)return!1;var a=arguments.length;if(1===a)f.forEach(e);else if(2===a)f.forEach(n);else{var s=Array.prototype.slice.call(arguments,1);f.forEach(i)}return!!f.length}function u(t,r,e){if(!e||t[a]){var n=t[a]||(t[a]={});return n[r]||(n[r]=[])}}\"undefined\"!=typeof r&&(r.exports=t);var a=\"listeners\",s={on:n,once:i,off:o,emit:f};e(t.prototype),t.mixin=e}(n)},{}],32:[function(t,r,e){e.read=function(t,r,e,n,i){var o,f,u=8*i-n-1,a=(1<<u)-1,s=a>>1,c=-7,h=e?i-1:0,l=e?-1:1,p=t[r+h];for(h+=l,o=p&(1<<-c)-1,p>>=-c,c+=u;c>0;o=256*o+t[r+h],h+=l,c-=8);for(f=o&(1<<-c)-1,o>>=-c,c+=n;c>0;f=256*f+t[r+h],h+=l,c-=8);if(0===o)o=1-s;else{if(o===a)return f?NaN:(p?-1:1)*(1/0);f+=Math.pow(2,n),o-=s}return(p?-1:1)*f*Math.pow(2,o-n)},e.write=function(t,r,e,n,i,o){var f,u,a,s=8*o-i-1,c=(1<<s)-1,h=c>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,y=r<0||0===r&&1/r<0?1:0;for(r=Math.abs(r),isNaN(r)||r===1/0?(u=isNaN(r)?1:0,f=c):(f=Math.floor(Math.log(r)/Math.LN2),r*(a=Math.pow(2,-f))<1&&(f--,a*=2),r+=f+h>=1?l/a:l*Math.pow(2,1-h),r*a>=2&&(f++,a/=2),f+h>=c?(u=0,f=c):f+h>=1?(u=(r*a-1)*Math.pow(2,i),f+=h):(u=r*Math.pow(2,h-1)*Math.pow(2,i),f=0));i>=8;t[e+p]=255&u,p+=d,u/=256,i-=8);for(f=f<<i|u,s+=i;s>0;t[e+p]=255&f,p+=d,f/=256,s-=8);t[e+p-d]|=128*y}},{}],33:[function(t,r,e){(function(Buffer){var t,r,n,i;!function(e){function o(t,r,n){function i(t,r,e,n){return this instanceof i?v(this,t,r,e,n):new i(t,r,e,n)}function o(t){return!(!t||!t[F])}function v(t,r,e,n,i){if(E&&A&&(r instanceof A&&(r=new E(r)),n instanceof A&&(n=new E(n))),!(r||e||n||g))return void(t.buffer=h(m,0));if(!s(r,e)){var o=g||Array;i=e,n=r,e=0,r=new o(8)}t.buffer=r,t.offset=e|=0,b!==typeof n&&(\"string\"==typeof n?x(r,e,n,i||10):s(n,i)?c(r,e,n,i):\"number\"==typeof i?(k(r,e+T,n),k(r,e+S,i)):n>0?O(r,e,n):n<0?L(r,e,n):c(r,e,m,0))}function x(t,r,e,n){var i=0,o=e.length,f=0,u=0;\"-\"===e[0]&&i++;for(var a=i;i<o;){var s=parseInt(e[i++],n);if(!(s>=0))break;u=u*n+s,f=f*n+Math.floor(u/B),u%=B}a&&(f=~f,u?u=B-u:f++),k(t,r+T,f),k(t,r+S,u)}function P(){var t=this.buffer,r=this.offset,e=_(t,r+T),i=_(t,r+S);return n||(e|=0),e?e*B+i:i}function R(t){var r=this.buffer,e=this.offset,i=_(r,e+T),o=_(r,e+S),f=\"\",u=!n&&2147483648&i;for(u&&(i=~i,o=B-o),t=t||10;;){var a=i%t*B+o;if(i=Math.floor(i/t),o=Math.floor(a/t),f=(a%t).toString(t)+f,!i&&!o)break}return u&&(f=\"-\"+f),f}function k(t,r,e){t[r+D]=255&e,e>>=8,t[r+C]=255&e,e>>=8,t[r+Y]=255&e,e>>=8,t[r+I]=255&e}function _(t,r){return t[r+I]*U+(t[r+Y]<<16)+(t[r+C]<<8)+t[r+D]}var T=r?0:4,S=r?4:0,I=r?0:3,Y=r?1:2,C=r?2:1,D=r?3:0,O=r?l:d,L=r?p:y,M=i.prototype,N=\"is\"+t,F=\"_\"+N;return M.buffer=void 0,M.offset=0,M[F]=!0,M.toNumber=P,M.toString=R,M.toJSON=P,M.toArray=f,w&&(M.toBuffer=u),E&&(M.toArrayBuffer=a),i[N]=o,e[t]=i,i}function f(t){var r=this.buffer,e=this.offset;return g=null,t!==!1&&0===e&&8===r.length&&x(r)?r:h(r,e)}function u(t){var r=this.buffer,e=this.offset;if(g=w,t!==!1&&0===e&&8===r.length&&Buffer.isBuffer(r))return r;var n=new w(8);return c(n,0,r,e),n}function a(t){var r=this.buffer,e=this.offset,n=r.buffer;if(g=E,t!==!1&&0===e&&n instanceof A&&8===n.byteLength)return n;var i=new E(8);return c(i,0,r,e),i.buffer}function s(t,r){var e=t&&t.length;return r|=0,e&&r+8<=e&&\"string\"!=typeof t[r]}function c(t,r,e,n){r|=0,n|=0;for(var i=0;i<8;i++)t[r++]=255&e[n++]}function h(t,r){return Array.prototype.slice.call(t,r,r+8)}function l(t,r,e){for(var n=r+8;n>r;)t[--n]=255&e,e/=256}function p(t,r,e){var n=r+8;for(e++;n>r;)t[--n]=255&-e^255,e/=256}function d(t,r,e){for(var n=r+8;r<n;)t[r++]=255&e,e/=256}function y(t,r,e){var n=r+8;for(e++;r<n;)t[r++]=255&-e^255,e/=256}function v(t){return!!t&&\"[object Array]\"==Object.prototype.toString.call(t)}var g,b=\"undefined\",w=b!==typeof Buffer&&Buffer,E=b!==typeof Uint8Array&&Uint8Array,A=b!==typeof ArrayBuffer&&ArrayBuffer,m=[0,0,0,0,0,0,0,0],x=Array.isArray||v,B=4294967296,U=16777216;t=o(\"Uint64BE\",!0,!0),r=o(\"Int64BE\",!0,!1),n=o(\"Uint64LE\",!1,!0),i=o(\"Int64LE\",!1,!1)}(\"object\"==typeof e&&\"string\"!=typeof e.nodeName?e:this||{})}).call(this,t(\"buffer\").Buffer)},{buffer:29}],34:[function(t,r,e){var n={}.toString;r.exports=Array.isArray||function(t){return\"[object Array]\"==n.call(t)}},{}]},{},[1])(1)});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).Buffer, __webpack_require__(2)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vYmFzZTY0LWpzL2luZGV4LmpzPzJhZGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gcGxhY2VIb2xkZXJzQ291bnQgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDBcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICByZXR1cm4gYjY0Lmxlbmd0aCAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzQ291bnQoYjY0KVxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyXG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG4gIHBsYWNlSG9sZGVycyA9IHBsYWNlSG9sZGVyc0NvdW50KGI2NClcblxuICBhcnIgPSBuZXcgQXJyKGxlbiAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgdmFyIEwgPSAwXG5cbiAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgb3V0cHV0ID0gJydcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDJdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz09J1xuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyAodWludDhbbGVuIC0gMV0pXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPSdcbiAgfVxuXG4gIHBhcnRzLnB1c2gob3V0cHV0KVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Jhc2U2NC1qcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/***/ function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vaWVlZTc1NC9pbmRleC5qcz83MGZlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2llZWU3NTQvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 10 */
/***/ function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lzYXJyYXkvaW5kZXguanM/ZWFiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pc2FycmF5L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

eval("const MsgpackConnection = __webpack_require__(12)\nconst Uint64 = __webpack_require__(3)\nconst Transaction = __webpack_require__(14)\nconst Ref = __webpack_require__(4)\nconst {TransactionRetryNeeded, TransactionRejectedError} = __webpack_require__(1)\nconst ObjectCache = __webpack_require__(13)\nconst {binaryToHex, asPromise} = __webpack_require__(0)\n\nlet nextConnectionNumber = 0\n\n/**\n * GosConnections represent the connection to the GoshawkDB.\n *\n * They should be acquired through the static {@link Goshawk.connect} function.\n */\nclass GosConnection {\n\t/** @private */\n\tconstructor(url) {\n\t\t/** @private used in logging to distinguish different connections */\n\t\tthis.connectionId = (nextConnectionNumber++)\n\t\t/** @private */\n\t\tthis.link = new MsgpackConnection(url, (\"000\" + this.connectionId).substr(-3))\n\n\t\t/**\n\t\t * The product and version information we sent to the server during the initial connection handshake.\n\t\t * @type {{Product: string, Version: string}}\n\t\t */\n\t\tthis.clientInfo = {Product: \"GoshawkDB\", Version: \"dev\"}\n\n\t\t/**\n\t\t * The product and version information we receive from the server during the initial handshake,\n\t\t * or null if it hasn't occurred yet.\n\t\t * @type {?{Product: string, Version: string}}\n\t\t */\n\t\tthis.serverInfo = null\n\n\t\t/**\n\t\t * The namespace that the server assigns to this client.\n\t\t * @type {?ArrayBuffer}\n\t\t */\n\t\tthis.namespace = null\n\n\t\t/**\n\t\t * The roots that this client has access to.\n\t\t * Provided by the server during handshake.\n\t\t * @type {{string: Ref}}\n\t\t */\n\t\tthis.roots = {}\n\n\t\t/** @private the function to deal with incoming messages */\n\t\tthis.messageHandler = null\n\t\t/** @private the top level cache that stores all the values and refs for objects the client knows about. */\n\t\tthis.cache = null\n\n\t\t// we control the first 8 bytes of transaction ids and new object ids (used during creation).\n\t\t// the namespace is appended to them when actually sent to the server.  We can't use normal js\n\t\t// numbers as javascript doesn't support 64 integers.  The only actual operation we need is 'increment'.\n\t\t/** @private */\n\t\tthis.nextTransactionId = Uint64.from(0, 0, 0, 0, 0, 0, 0, 0)\n\t\t/** @private */\n\t\tthis.nextNewObjectId = Uint64.from(0, 0, 0, 0, 0, 0, 0, 0)\n\n\t\t/** @private the queue of transactions.*/\n\t\tthis.transactions = []\n\t\t/** @private the transaction currently being processed.*/\n\t\tthis.currentTransaction = null\n\t\t/** @private the timeout handle or null if no timeout to process a transaction is waiting*/\n\t\tthis.scheduledCallback = null\n\t}\n\n\t/**\n\t * Connects to the server.  If running in node, you will need to provide connectionOptions that include the client\n\t * certificate and key.\n\t *\n\t * @return {Promise<GosConnection, Error>}\n\t */\n\tconnect(connectionOptions) {\n\t\tconst serverHelloHandler = (message) => {\n\t\t\t// TODO? : a check could go here to ensure that the server version matches our version (from this.clientInfo.Version).\n\t\t\tthis.serverInfo = message\n\t\t\tthis.messageHandler = rootsHandler\n\t\t}\n\n\t\tconst rootsHandler = (message) => {\n\t\t\t// populate the roots\n\t\t\tthis.roots = {}\n\t\t\tfor (const root of message.Roots) {\n\t\t\t\tthis.roots[root.Name] = Ref.fromMessage(root)\n\t\t\t}\n\t\t\t// set the namespace\n\t\t\tthis.namespace = message.Namespace\n\n\t\t\t// now we're properly connected\n\t\t\tthis.messageHandler = null\n\t\t\tthis.cache = new ObjectCache(this.namespace)\n\t\t\tconsole.info(`Connection ${this.connectionId}: Connected to goshawk`, this.serverInfo, this.clientInfo, this.namespace, this.roots)\n\t\t\tthis._onConnectionNegotiated(this)\n\t\t}\n\n\t\t// This promise should resolve with a working, setup connection if the connection makes its way to a fully\n\t\t// negotiated connection: i.e. it connects, it swaps info, it loads the roots and the namespace and initialises the\n\t\t// relevant state.\n\t\t// If anything happens to disrupt this process before it completes, this promise will reject.\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._onConnectionNegotiated = resolve\n\t\t\tthis.messageHandler = serverHelloHandler\n\t\t\tthis.link.connect(\n\t\t\t\t// on message\n\t\t\t\t(data) => {\n\t\t\t\t\tif (this.messageHandler) {\n\t\t\t\t\t\tthis.messageHandler(data)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(`Connection ${this.connectionId}: No handler found for message`, data)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t// on end - if the connection stops for any reason (error, or deliberate) before it resolves then it rejects.\n\t\t\t\t(e) => reject(e),\n\t\t\t\t// on open we start the handshake by sending the client info.\n\t\t\t\t() => this.link.send(this.clientInfo),\n\t\t\t\tconnectionOptions\n\t\t\t)\n\t\t})\n\t}\n\n\t/**\n\t * Queues a transaction for running, then ensures that transaction processing is happening.\n\t * The returned promise resolves with the value returned by the fn once the transaction has committed.  The fn may be\n\t * run multiple times and so should avoid side effects.\n\t * fn may be an asynchronous or a synchronous function.\n\t *\n\t * @param {function(txn: Transaction): {*|Promise<*, Error>}}} fn the transaction function.  This function may be run multiple times and should rethrow any TransactionRetryNeeded exceptions.\n\t * @returns {Promise<*, Error>} a promise that resolves to the result of the transaction function once the transaction submits or an error if it cannot.\n \t */\n\ttransact(fn) {\n\t\tif (fn instanceof Function === false) {\n\t\t\tthrow new TypeError(`Connection ${this.connectionId}: Transaction argument must be a function, was ${String(fn)}`)\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.transactions.push(new Transaction(this, fn, resolve, reject, this.cache, this.namespace))\n\t\t\tthis.scheduleNextTransaction()\n\t\t})\n\t}\n\n\t/**\n\t * Closes the underlying link.\n\t */\n\tclose() {\n\t\tthis.link.close()\n\t}\n\n\t// private api\n\n\t/** @private\n\t * Gets the object id to use for the next `txn.create` and increments the counter.\n\t * @returns {Uint8Array}\n\t */\n\tgetNewObjectId() {\n\t\tconst objId = this.nextNewObjectId.concat(this.namespace)\n\t\tthis.nextNewObjectId.inc()\n\t\treturn new Uint8Array(objId)\n\t}\n\n\t/** @private\n\t * Actually runs the next queued transaction.\n\t */\n\texecuteNextTransaction() {\n\t\tif (this.currentTransaction != null) {\n\t\t\t// we're currently processing a transaction, exit without doing anything.\n\t\t\treturn\n\t\t}\n\n\t\tconst currentTransaction = this.currentTransaction = this.transactions.shift()\n\t\tconst txnIdWithNamespace = this.nextTransactionId.concat(this.namespace)\n\n\t\tconst succeed = (finalId, transactionResult) => {\n\t\t\tif (finalId) {\n\t\t\t\tcurrentTransaction.promoteCache(finalId)\n\t\t\t}\n\t\t\tcurrentTransaction.onSuccess(transactionResult)\n\t\t\tthis.scheduleNextTransaction(true)\n\t\t}\n\t\tconst retry = () => {\n\t\t\tcurrentTransaction.reset()\n\t\t\tthis.transactions.unshift(currentTransaction)\n\t\t\tthis.scheduleNextTransaction(true)\n\t\t}\n\t\tconst fail = (err) => {\n\t\t\tcurrentTransaction.onFail(err)\n\t\t\tthis.scheduleNextTransaction(true)\n\t\t}\n\t\tconst sendTransaction = (result) => {\n\t\t\tconst transactionMessage = currentTransaction.toMessage(txnIdWithNamespace)\n\t\t\tif (transactionMessage.ClientTxnSubmission.Actions.length > 0) {\n\t\t\t\tthis.link.request(transactionMessage)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tthis.updateFromTransactionResponse(response)\n\t\t\t\t\t\tconst outcome = response.ClientTxnOutcome\n\t\t\t\t\t\tif (outcome.Commit) {\n\t\t\t\t\t\t\tsucceed(outcome.FinalId, result)\n\t\t\t\t\t\t} else if (outcome.Error != \"\") {\n\t\t\t\t\t\t\tfail(new TransactionRejectedError(outcome.Error))\n\t\t\t\t\t\t} else if (outcome.Abort) {\n\t\t\t\t\t\t\tretry()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfail(\"Unknown response message \" + JSON.stringify(outcome))\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch(fail)\n\t\t\t} else {\n\t\t\t\tsucceed(undefined, result)\n\t\t\t}\n\t\t}\n\n\t\t// we use asPromise, since the result of running fn might be a Promise.\n\t\tasPromise(() => {\n\t\t\treturn currentTransaction.fn(currentTransaction)\n\t\t}).catch( (e) => {\n\t\t\tif (e instanceof TransactionRetryNeeded === false) {\n\t\t\t\tthrow e\n\t\t\t}\n\t\t}).then(sendTransaction, fail)\n\t}\n\n\t/** @private\n\t * Updates the top level connection cache and counters based on a response from the server.\n\t * @param response the msgpack response.\n\t */\n\tupdateFromTransactionResponse(response) {\n\t\t// Responses contain a final transaction id.  We take the first 8 bytes and increment it.\n\t\tthis.nextTransactionId = Uint64.fromBinary(response.ClientTxnOutcome.FinalId).inc()\n\t\t// If we received an Abort message, then we may also have received some cache update instructions.\n\t\tif (response.ClientTxnOutcome.Abort) {\n\t\t\tfor (let update of response.ClientTxnOutcome.Abort) {\n\t\t\t\tconst otherTxnId = update.Version.buffer\n\t\t\t\tfor (let action of update.Actions) {\n\t\t\t\t\tconst id = action.VarId\n\t\t\t\t\tif (action.Delete) {\n\t\t\t\t\t\tconsole.debug(`Connection ${this.connectionId}: Removing ${binaryToHex(id)} from cache.`)\n\t\t\t\t\t\tthis.cache.remove(id)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst writeData = action.Write || action.Create\n\t\t\t\t\t\tif (writeData) {\n\t\t\t\t\t\t\tthis.cache.get(id).update(otherTxnId, writeData.Value.buffer, writeData.References.map(Ref.fromMessage))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/** @private\n\t * If there is no transaction currently processing and we haven't scheduled one\n\t * and there is a transaction waiting to be processed, then schedule it.\n\t * @param {boolean} clearCurrentTransaction if true, this will first clear the current transaction.\n\t */\n\tscheduleNextTransaction(clearCurrentTransaction) {\n\t\tif (clearCurrentTransaction) {\n\t\t\tthis.currentTransaction = null\n\t\t}\n\t\tif (this.scheduledCallback == null && this.currentTransaction == null && this.transactions.length > 0) {\n\t\t\tthis.scheduledCallback = setTimeout(() => {\n\t\t\t\tthis.scheduledCallback = null\n\t\t\t\tthis.executeNextTransaction()\n\t\t\t}, 0)\n\t\t}\n\t}\n}\n\nmodule.exports = GosConnection//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

eval("const msgpack = __webpack_require__(7)\nconst WebSocket = __webpack_require__(15)\n\n/**\n * The websocket and Msgpack connection.\n * @private\n */\nclass MsgpackConnection {\n\tconstructor(url, connectionLabel = \"\") {\n\t\tthis.url = url\n\t\t// connectionLabel is purely used for logging.\n\t\tthis.connectionLabel = connectionLabel\n\t\tthis.websocket = null\n\t\tthis.options = {\n\t\t\tcodec: msgpack.createCodec({binarraybuffer: true})\n\t\t}\n\t\t// all the callbacks!\n\t\tthis.onOpen = null\n\t\tthis.onEnd = null\n\t\tthis.onMessage = null\n\t\tthis.onClose = null\n\t\tthis.onError = null\n\t}\n\n\tconnect(onMessage, onEnd, onOpen, connectionOptions) {\n\t\tthis.onMessage = onMessage\n\t\t// onEnd triggers onError or onClose.\n\t\tthis.onEnd = onEnd\n\t\tthis.onOpen = onOpen\n\t\tconst websocket = this.websocket = new WebSocket(this.url, undefined, connectionOptions)\n\t\twebsocket.binaryType = 'arraybuffer'\n\t\twebsocket.onopen = (evt) => {\n\t\t\tconsole.debug(`Connection ${this.connectionLabel}: Connection Open`)\n\t\t\tif (this.onOpen) {\n\t\t\t\tthis.onOpen(evt)\n\t\t\t}\n\t\t}\n\t\twebsocket.onclose = (evt) => {\n\t\t\tconsole.debug(`Connection ${this.connectionLabel}: Connection Closed`, evt.code, evt.reason)\n\t\t\tif (this.onEnd) {\n\t\t\t\tthis.onEnd(evt)\n\t\t\t}\n\t\t\tif (this.onClose) {\n\t\t\t\tthis.onClose(evt)\n\t\t\t}\n\t\t}\n\t\twebsocket.onerror = (evt) => {\n\t\t\tconsole.error(`Connection ${this.connectionLabel}: Connection Error`, evt.code, evt.reason)\n\t\t\tif (this.onEnd) {\n\t\t\t\tthis.onEnd(evt)\n\t\t\t}\n\t\t\tif (this.onError) {\n\t\t\t\tthis.onError(evt)\n\t\t\t}\n\t\t}\n\t\twebsocket.onmessage = (messageEvent) => {\n\t\t\tconst data = msgpack.decode(new Uint8Array(messageEvent.data));\n\t\t\tconsole.debug(`${this.connectionLabel} <`, data)\n\n\t\t\tif (this.onMessage) {\n\t\t\t\tthis.onMessage(data)\n\t\t\t}\n\t\t}\n\t}\n\n\tsend(message) {\n\t\tconsole.debug(`${this.connectionLabel} >`, message)\n\t\tthis.websocket.send(msgpack.encode(message, this.options))\n\t}\n\n\t// sends a message, and returns a promise which resolves with the next message back from the server. This helps\n\t// make a request/response pattern easy.  It replaces onMessage and onEnd until it receives the message.\n\trequest(message) {\n\t\tconst oldHandler = this.onMessage\n\t\tconst oldEndHandler = this.onEnd\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.onMessage = (msg) => {\n\t\t\t\tresolve(msg)\n\t\t\t\tthis.onMessage = oldHandler\n\t\t\t\tthis.onEnd = oldEndHandler\n\t\t\t}\n\t\t\tthis.onEnd = (evt) => {\n\t\t\t\tthis.onMessage = oldHandler\n\t\t\t\tthis.onEnd = oldEndHandler\n\t\t\t\treject(evt)\n\t\t\t\tif (oldEndHandler) {\n\t\t\t\t\toldEndHandler(evt)\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.send(message)\n\t\t})\n\t}\n\n\tclose() {\n\t\tthis.websocket.close()\n\t}\n}\n\nmodule.exports = MsgpackConnection//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbXNncGFjay1jb25uZWN0aW9uLmpzP2M4MGEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbXNncGFjayA9IHJlcXVpcmUoJy4uL2xpYi9tc2dwYWNrLm1pbicpXG5jb25zdCBXZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpXG5cbi8qKlxuICogVGhlIHdlYnNvY2tldCBhbmQgTXNncGFjayBjb25uZWN0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgTXNncGFja0Nvbm5lY3Rpb24ge1xuXHRjb25zdHJ1Y3Rvcih1cmwsIGNvbm5lY3Rpb25MYWJlbCA9IFwiXCIpIHtcblx0XHR0aGlzLnVybCA9IHVybFxuXHRcdC8vIGNvbm5lY3Rpb25MYWJlbCBpcyBwdXJlbHkgdXNlZCBmb3IgbG9nZ2luZy5cblx0XHR0aGlzLmNvbm5lY3Rpb25MYWJlbCA9IGNvbm5lY3Rpb25MYWJlbFxuXHRcdHRoaXMud2Vic29ja2V0ID0gbnVsbFxuXHRcdHRoaXMub3B0aW9ucyA9IHtcblx0XHRcdGNvZGVjOiBtc2dwYWNrLmNyZWF0ZUNvZGVjKHtiaW5hcnJheWJ1ZmZlcjogdHJ1ZX0pXG5cdFx0fVxuXHRcdC8vIGFsbCB0aGUgY2FsbGJhY2tzIVxuXHRcdHRoaXMub25PcGVuID0gbnVsbFxuXHRcdHRoaXMub25FbmQgPSBudWxsXG5cdFx0dGhpcy5vbk1lc3NhZ2UgPSBudWxsXG5cdFx0dGhpcy5vbkNsb3NlID0gbnVsbFxuXHRcdHRoaXMub25FcnJvciA9IG51bGxcblx0fVxuXG5cdGNvbm5lY3Qob25NZXNzYWdlLCBvbkVuZCwgb25PcGVuLCBjb25uZWN0aW9uT3B0aW9ucykge1xuXHRcdHRoaXMub25NZXNzYWdlID0gb25NZXNzYWdlXG5cdFx0Ly8gb25FbmQgdHJpZ2dlcnMgb25FcnJvciBvciBvbkNsb3NlLlxuXHRcdHRoaXMub25FbmQgPSBvbkVuZFxuXHRcdHRoaXMub25PcGVuID0gb25PcGVuXG5cdFx0Y29uc3Qgd2Vic29ja2V0ID0gdGhpcy53ZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KHRoaXMudXJsLCB1bmRlZmluZWQsIGNvbm5lY3Rpb25PcHRpb25zKVxuXHRcdHdlYnNvY2tldC5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJ1xuXHRcdHdlYnNvY2tldC5vbm9wZW4gPSAoZXZ0KSA9PiB7XG5cdFx0XHRjb25zb2xlLmRlYnVnKGBDb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uTGFiZWx9OiBDb25uZWN0aW9uIE9wZW5gKVxuXHRcdFx0aWYgKHRoaXMub25PcGVuKSB7XG5cdFx0XHRcdHRoaXMub25PcGVuKGV2dClcblx0XHRcdH1cblx0XHR9XG5cdFx0d2Vic29ja2V0Lm9uY2xvc2UgPSAoZXZ0KSA9PiB7XG5cdFx0XHRjb25zb2xlLmRlYnVnKGBDb25uZWN0aW9uICR7dGhpcy5jb25uZWN0aW9uTGFiZWx9OiBDb25uZWN0aW9uIENsb3NlZGAsIGV2dC5jb2RlLCBldnQucmVhc29uKVxuXHRcdFx0aWYgKHRoaXMub25FbmQpIHtcblx0XHRcdFx0dGhpcy5vbkVuZChldnQpXG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5vbkNsb3NlKSB7XG5cdFx0XHRcdHRoaXMub25DbG9zZShldnQpXG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdlYnNvY2tldC5vbmVycm9yID0gKGV2dCkgPT4ge1xuXHRcdFx0Y29uc29sZS5lcnJvcihgQ29ubmVjdGlvbiAke3RoaXMuY29ubmVjdGlvbkxhYmVsfTogQ29ubmVjdGlvbiBFcnJvcmAsIGV2dC5jb2RlLCBldnQucmVhc29uKVxuXHRcdFx0aWYgKHRoaXMub25FbmQpIHtcblx0XHRcdFx0dGhpcy5vbkVuZChldnQpXG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5vbkVycm9yKSB7XG5cdFx0XHRcdHRoaXMub25FcnJvcihldnQpXG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdlYnNvY2tldC5vbm1lc3NhZ2UgPSAobWVzc2FnZUV2ZW50KSA9PiB7XG5cdFx0XHRjb25zdCBkYXRhID0gbXNncGFjay5kZWNvZGUobmV3IFVpbnQ4QXJyYXkobWVzc2FnZUV2ZW50LmRhdGEpKTtcblx0XHRcdGNvbnNvbGUuZGVidWcoYCR7dGhpcy5jb25uZWN0aW9uTGFiZWx9IDxgLCBkYXRhKVxuXG5cdFx0XHRpZiAodGhpcy5vbk1lc3NhZ2UpIHtcblx0XHRcdFx0dGhpcy5vbk1lc3NhZ2UoZGF0YSlcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRzZW5kKG1lc3NhZ2UpIHtcblx0XHRjb25zb2xlLmRlYnVnKGAke3RoaXMuY29ubmVjdGlvbkxhYmVsfSA+YCwgbWVzc2FnZSlcblx0XHR0aGlzLndlYnNvY2tldC5zZW5kKG1zZ3BhY2suZW5jb2RlKG1lc3NhZ2UsIHRoaXMub3B0aW9ucykpXG5cdH1cblxuXHQvLyBzZW5kcyBhIG1lc3NhZ2UsIGFuZCByZXR1cm5zIGEgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB3aXRoIHRoZSBuZXh0IG1lc3NhZ2UgYmFjayBmcm9tIHRoZSBzZXJ2ZXIuIFRoaXMgaGVscHNcblx0Ly8gbWFrZSBhIHJlcXVlc3QvcmVzcG9uc2UgcGF0dGVybiBlYXN5LiAgSXQgcmVwbGFjZXMgb25NZXNzYWdlIGFuZCBvbkVuZCB1bnRpbCBpdCByZWNlaXZlcyB0aGUgbWVzc2FnZS5cblx0cmVxdWVzdChtZXNzYWdlKSB7XG5cdFx0Y29uc3Qgb2xkSGFuZGxlciA9IHRoaXMub25NZXNzYWdlXG5cdFx0Y29uc3Qgb2xkRW5kSGFuZGxlciA9IHRoaXMub25FbmRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dGhpcy5vbk1lc3NhZ2UgPSAobXNnKSA9PiB7XG5cdFx0XHRcdHJlc29sdmUobXNnKVxuXHRcdFx0XHR0aGlzLm9uTWVzc2FnZSA9IG9sZEhhbmRsZXJcblx0XHRcdFx0dGhpcy5vbkVuZCA9IG9sZEVuZEhhbmRsZXJcblx0XHRcdH1cblx0XHRcdHRoaXMub25FbmQgPSAoZXZ0KSA9PiB7XG5cdFx0XHRcdHRoaXMub25NZXNzYWdlID0gb2xkSGFuZGxlclxuXHRcdFx0XHR0aGlzLm9uRW5kID0gb2xkRW5kSGFuZGxlclxuXHRcdFx0XHRyZWplY3QoZXZ0KVxuXHRcdFx0XHRpZiAob2xkRW5kSGFuZGxlcikge1xuXHRcdFx0XHRcdG9sZEVuZEhhbmRsZXIoZXZ0KVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNlbmQobWVzc2FnZSlcblx0XHR9KVxuXHR9XG5cblx0Y2xvc2UoKSB7XG5cdFx0dGhpcy53ZWJzb2NrZXQuY2xvc2UoKVxuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTXNncGFja0Nvbm5lY3Rpb25cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9tc2dwYWNrLWNvbm5lY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {const {binaryToHex, toArrayBuffer} = __webpack_require__(0)\nconst {TransactionRetryNeeded, MutationNotAllowed} = __webpack_require__(1)\nconst Uint64 = __webpack_require__(3)\nconst Ref = __webpack_require__(4)\nconst Goshawk = __webpack_require__(5)\n\nfunction checkRefs(refs) {\n\tfor (let i = 0; i < refs.length; ++i) {\n\t\tconst ref = refs[i]\n\t\tif (ref instanceof Ref === false) {\n\t\t\tthrow new TypeError(`Reference ${i} was not of reference type - was a ${ref.constructor.name} : ${ref.toString()}`)\n\t\t}\n\t}\n}\n\n/**\n * The top level object cache. It keeps objects value and refs stored against their id.\n * @private\n */\nclass ObjectCache {\n\tconstructor() {\n\t\tthis.objects = new Map()\n\t}\n\n\tget(id) {\n\t\tconst hashable = binaryToHex(id)\n\t\tif (!this.objects.has(hashable)) {\n\t\t\tthis.objects.set(hashable, new ObjectCacheEntry(id))\n\t\t}\n\t\treturn this.objects.get(hashable)\n\t}\n\n\tremove(id) {\n\t\tconst hashable = binaryToHex(id)\n\t\tif (!this.objects.has(hashable)) {\n\t\t\tthrow new Error(`Unexpected remove of id ${hashable}`)\n\t\t}\n\t\tthis.objects.delete(hashable)\n\t}\n\n\tgetTemporaryView() {\n\t\treturn new CopyCache(this)\n\t}\n}\n\nmodule.exports = ObjectCache\n\n// An ObjectCacheEntry represents the clients knowledge about a GoshawkDB Object.\n//  - It should always have an id.\n//  - If it contains values known to have been in the database (either they have been sent in a cache update, or a\n//    create/write that has been acknowledged.  The values version and data.value and data.refs will be set.\n//\t- data.refs and data.value will be set after a write or create.\nclass ObjectCacheEntry {\n\tconstructor(id) {\n\t\tif (id instanceof Uint8Array == false) {\n\t\t\tthrow new TypeError(`id must be a uint8, was ${String(id)}`)\n\t\t}\n\t\tthis.id = id\n\n\t\tthis.version = null\n\t\tthis.data = {\n\t\t\tvalue: null,\n\t\t\trefs: null\n\t\t}\n\n\t\t// best effort attempt to restrict mutations in the data I return to the user.\n\t\tthis.readOnlyData = Object.create({}, {\n\t\t\t\tvalue: {\n\t\t\t\t\tset: () => {\n\t\t\t\t\t\tthrow new MutationNotAllowed(\"Cannot set value without a transaction.write call.\")\n\t\t\t\t\t},\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn this.data.value\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trefs: {\n\t\t\t\t\tset: () => {\n\t\t\t\t\t\tthrow new MutationNotAllowed(\"Cannot set references without a transaction.write call.\")\n\t\t\t\t\t},\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\tconst srcRefs = this.data.refs\n\t\t\t\t\t\tif (global.Proxy) {\n\t\t\t\t\t\t\treturn new Proxy(srcRefs, {\n\t\t\t\t\t\t\t\tset: () => {\n\t\t\t\t\t\t\t\t\tthrow new MutationNotAllowed(\"Cannot change references without a transaction.write call.\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn srcRefs.slice()\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tversion: {\n\t\t\t\t\tset: () => {\n\t\t\t\t\t\tthrow new MutationNotAllowed(\"Cannot set references without a transaction.write call.\")\n\t\t\t\t\t},\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn this.version\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\n\t\t// Record which actions have occurred on this object from the client.\n\t\t// These are only needed on objects within a transactions cache, not at the top level.\n\t\t//  - If something has been written or created, calling read on it has no effect (it is answered from cache).\n\t\t//  - If something has been created, calling write on it has no effect (the create is merely updated to the contents of the write).\n\t\tthis.hasBeenWritten = false\n\t\tthis.hasBeenRead = false\n\t\tthis.hasBeenCreated = false\n\t}\n\n\t// Updates representing version, value and refs are they are in the remote database.  Can populate on an abort or a submit.\n\tupdate(version, value, refs) {\n\t\tvalue = toArrayBuffer(value)\n\t\tcheckRefs(refs)\n\t\tthis.data.value = value\n\t\tthis.data.refs = refs\n\t\tthis.version = toArrayBuffer(version)\n\t}\n\n\tread() {\n\t\tif (!this.hasBeenWritten && !this.hasBeenCreated) {\n\t\t\tthis.hasBeenRead = true\n\t\t}\n\t\tif (this.hasBeenCreated || this.hasBeenWritten || this.version != null) {\n\t\t\treturn this.readOnlyData\n\t\t}\n\n\t\tthrow new TransactionRetryNeeded(`Object ${binaryToHex(this.id)} not present in cache`)\n\t}\n\n\twrite(value, refs) {\n\t\tvalue = toArrayBuffer(value)\n\t\tcheckRefs(refs)\n\t\tif (!this.hasBeenCreated) {\n\t\t\tthis.hasBeenWritten = true\n\t\t}\n\t\tthis.data.value = value\n\t\tthis.data.refs = refs\n\t}\n\n\tcreate(value, refs) {\n\t\tif (value instanceof ArrayBuffer != true) {\n\t\t\tthrow new TypeError(\"values should be array buffers : \" + value)\n\t\t}\n\t\tcheckRefs(refs)\n\t\tthis.hasBeenCreated = true\n\t\tthis.data.value = value\n\t\tthis.data.refs = refs\n\t}\n\n\tclone() {\n\t\treturn new ObjectCacheEntry(this.id).copyFrom(this)\n\t}\n\n\tcopyFrom(otherEntry) {\n\t\tthis.version = otherEntry.version\n\t\tthis.data.value = otherEntry.data.value\n\t\tthis.data.refs = otherEntry.data.refs\n\t\tthis.hasBeenRead = otherEntry.hasBeenRead\n\t\tthis.hasBeenWritten = otherEntry.hasBeenWritten\n\t\tthis.hasBeenCreated = otherEntry.hasBeenCreated\n\t\treturn this\n\t}\n\n\ttoAction(initialVersion) {\n\t\tconst result = {\n\t\t\tVarId: this.id.buffer,\n\t\t}\n\t\tconst refMessages = this.data.refs ? this.data.refs.map((ref) => ref.toMessage()) : []\n\n\t\tif (this.hasBeenRead && !this.hasBeenWritten) {\n\t\t\tresult.Read = {Version: this.version || initialVersion}\n\t\t} else if (this.hasBeenWritten && !this.hasBeenRead) {\n\t\t\tresult.Write = {Value: this.data.value, References: refMessages}\n\t\t} else if (this.hasBeenWritten && this.hasBeenRead) {\n\t\t\tresult.ReadWrite = {Version: this.version, Value: this.data.value, References: refMessages}\n\t\t} else if (this.hasBeenCreated) {\n\t\t\tresult.Create = {Value: this.data.value, References: refMessages}\n\t\t} else {\n\t\t\tthrow new Error(`No read or write has occurred on object ${this.id}, cannot form an action.`)\n\t\t}\n\t\treturn result\n\t}\n}\n\nclass CopyCache {\n\tconstructor(parentCache) {\n\t\tthis.parentCache = parentCache\n\t\tthis.objects = new Map()\n\t}\n\n\tget(id) {\n\t\tconst hashable = binaryToHex(id)\n\t\tif (!this.objects.has(hashable)) {\n\t\t\tthis.objects.set(hashable, this.parentCache.get(id).clone())\n\t\t}\n\t\treturn this.objects.get(hashable)\n\t}\n\n\tpromote(finalTxnId) {\n\t\tfor (let [, entry] of this.objects) {\n\t\t\tconst parentEntry = this.parentCache.get(entry.id)\n\t\t\tif (finalTxnId) {\n\t\t\t\t// if we are given a transaction id, then this promotion should be treated like a cache update from the server.\n\t\t\t\tif (entry.hasBeenCreated || entry.hasBeenWritten) {\n\t\t\t\t\tparentEntry.update(finalTxnId, entry.data.value, entry.data.refs)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// otherwise, it's a nested transaction completing, so we do a full copy into the parent.\n\t\t\t\tparentEntry.copyFrom(entry)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Returns an array of all the actions that have occurred on this cache.\n\tgetActions(namespace) {\n\t\tconst actions = []\n\t\t// the version to ask for if we don't currently have any data in the cache for an object.\n\t\tconst initialVersion = Uint64.from(0, 0, 0, 0, 0, 0, 0, 0).concat(namespace)\n\n\t\tfor (let [,cacheEntry] of this.objects) {\n\t\t\tif (cacheEntry.hasBeenRead || cacheEntry.hasBeenWritten || cacheEntry.hasBeenCreated) {\n\t\t\t\tactions.push(cacheEntry.toAction(initialVersion))\n\t\t\t}\n\t\t}\n\n\t\treturn actions\n\t}\n\n\tgetTemporaryView() {\n\t\treturn new CopyCache(this)\n\t}\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

eval("const Ref = __webpack_require__(4)\nconst {TransactionRetryNeeded, CapabilityDenied} = __webpack_require__(1)\nconst {toArrayBuffer} = __webpack_require__(0)\n\n/**\n * A transaction represents an attempt to make a modification to the database.\n *\n * The code associated with it may be required to run multiple times before it\n * successfully completes.  Care must be taken to make sure this will not\n * break the client environment.\n *\n * Transactions are acquired by calling {@link Connection#transact}.\n */\nclass Transaction {\n\n\t/** @private */\n\tconstructor(connection, txnFn, onSuccess, onFail, parentCache) {\n\t\t/** @private */\n\t\tthis.onSuccess = onSuccess;\n\n\t\t/** @private */\n\t\tthis.onFail = onFail;\n\n\t\t/** @private */\n\t\tthis.shouldRetry = false\n\n\t\t/**\n\t\t * The roots that this client has access to.\n\t\t * @type {{string: Ref}}\n\t\t */\n\t\tthis.roots = connection.roots\n\n\t\t/** @private */\n\t\tthis.fn = txnFn\n\n\t\t/** @private */\n\t\tthis.connection = connection\n\n\t\t/** @private */\n\t\tthis.parentCache = parentCache\n\n\t\t/** @private */\n\t\tthis.cache = parentCache.getTemporaryView()\n\t}\n\n\t/**\n\t * Reads the value and references from an object pointed to by a Ref.\n\t * @param {Ref} ref a reference to the object to read from.\n\t * @returns {{value:ArrayBuffer, refs:Ref[]}}\n\t * @throws {CapabilityDenied} if ref does not have read capability.\n\t * @throws {TransactionRetryNeeded} if the object is not in cache. Do not catch this without rethrowing it.\n\t */\n\tread(ref) {\n\t\tif (ref instanceof Ref == false) {\n\t\t\tthrow new TypeError(`Can only read a reference; you tried to read from ${String(ref)}`)\n\t\t}\n\t\tif (!ref.read) {\n\t\t\tthrow new CapabilityDenied(`Unable to read using reference ${ref.toString()}, as it doesn't allow reads.`)\n\t\t}\n\t\tconst id = ref.varId\n\t\tconst cacheEntry = this.cache.get(id)\n\t\treturn cacheEntry.read()\n\t}\n\n\t/**\n\t * Changes the value an dreferences of an object pointed to by a Ref.\n\t * @param {Ref} ref a reference to the object to be written.\n\t * @param {ArrayBuffer|Buffer|TypedArray} value the new value to be stored in the object.\n\t * @param {Ref[]} refs the references from this object to other objects.\n\t */\n\twrite(ref, value, refs) {\n\t\tif (ref instanceof Ref == false) {\n\t\t\tthrow new TypeError(`Can only write with a reference; you tried to write to ${String(ref)}.`)\n\t\t}\n\t\tif (!ref.write) {\n\t\t\tthrow new CapabilityDenied(`Unable to write using reference ${ref.toString()}, as it doesn't allow writes.`)\n\t\t}\n\t\tvalue = toArrayBuffer(value)\n\t\tconst id = ref.varId\n\t\tconst cacheEntry = this.cache.get(id)\n\t\tcacheEntry.write(value, refs)\n\t}\n\n\t/**\n\t * Creates a new object and returns the reference to it.\n\t * @param {ArrayBuffer|Buffer|TypedArray} value the value that the new object will be created with.\n\t * @param {Ref[]} refs the references that the new object will be created with.  This will default to the empty array.\n\t * @returns {Ref} a reference to the newly created object.\n\t */\n\tcreate(value, refs = []) {\n\t\tvalue = toArrayBuffer(value)\n\t\tconst newId = this.connection.getNewObjectId()\n\t\tconst cacheEntry = this.cache.get(newId)\n\t\tcacheEntry.create(value, refs)\n\t\treturn new Ref(new Uint8Array(newId), true, true)\n\t}\n\n\t/**\n\t * Stops the current transaction, and waits for any of the values that have been\n\t * read to change before rerunning.  No further transactions will be processed while\n\t * a transaction is waiting.\n\t *\n\t * Internally, this method throws a TransactionRetryNeeded error.  If you catch it\n\t * and do not rethrow it, you will stop the retry behaviour from working.\n\t *\n\t * @throws {TransactionRetryNeeded}\n\t */\n\tretry() {\n\t\tthis.shouldRetry = true\n\t\tthrow new TransactionRetryNeeded(\"Transaction code called retry.\")\n\t}\n\n\t/**\n\t * Runs a nested transaction inside this transaction.\n\t *\n\t * If a nested transaction fails, its modifications will not be seen by the parent transaction.\n\t *\n\t * @param {function} fn the transaction function.  This function may be run multiple times and should rethrow any TransactionRetryNeeded exceptions.\n\t * @returns {Promise<*, Error>} a promise that resolves to the result of the transaction function once the transaction submits or an error if it cannot.\n\t */\n\ttransact(fn) {\n\t\tif (fn instanceof Function === false) {\n\t\t\tthrow new TypeError(\"Transaction argument must be a function.\")\n\t\t}\n\t\tconst nestedTransaction = new Transaction(this.connection, fn, this.onSuccess, this.onFail, this.cache)\n\t\tthis.connection.currentTransaction = nestedTransaction\n\t\tlet resultPromise = undefined\n\t\ttry {\n\t\t\tresultPromise = Promise.resolve(fn(nestedTransaction))\n\t\t} catch (e) {\n\t\t\tif (e instanceof TransactionRetryNeeded) {\n\t\t\t\tthis.shouldRetry = true\n\t\t\t}\n\t\t\tthis.connection.currentTransaction = this\n\t\t\tthrow e\n\t\t}\n\n\t\treturn resultPromise\n\t\t\t.then((result) => {\n\t\t\t\tthis.connection.currentTransaction = this\n\t\t\t\tnestedTransaction.promoteCache(undefined)\n\t\t\t\treturn result\n\t\t\t})\n\t}\n\n\t// private API\n\n\t/** @private\n\t * Prepares this transaction to be run again.*/\n\treset() {\n\t\tthis.cache = this.parentCache.getTemporaryView()\n\t\tthis.shouldRetry = false\n\t}\n\n\t/** @private\n\t * This transaction has completed successfully, notify the parent.*/\n\tpromoteCache(finalTxnId) {\n\t\tthis.cache.promote(finalTxnId)\n\t}\n\n\t/** @private */\n\ttoMessage(txnId) {\n\t\tconst actions = this.cache.getActions(this.connection.namespace)\n\t\treturn {\n\t\t\tClientTxnSubmission: {\n\t\t\t\tId: txnId,\n\t\t\t\tRetry: this.shouldRetry,\n\t\t\t\tActions: actions\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = Transaction//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdHJhbnNhY3Rpb24uanM/N2ZjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWYgPSByZXF1aXJlKCcuL3JlZicpXG5jb25zdCB7VHJhbnNhY3Rpb25SZXRyeU5lZWRlZCwgQ2FwYWJpbGl0eURlbmllZH0gPSByZXF1aXJlKCcuL2Vycm9ycycpXG5jb25zdCB7dG9BcnJheUJ1ZmZlcn0gPSByZXF1aXJlKCcuL3V0aWxzJylcblxuLyoqXG4gKiBBIHRyYW5zYWN0aW9uIHJlcHJlc2VudHMgYW4gYXR0ZW1wdCB0byBtYWtlIGEgbW9kaWZpY2F0aW9uIHRvIHRoZSBkYXRhYmFzZS5cbiAqXG4gKiBUaGUgY29kZSBhc3NvY2lhdGVkIHdpdGggaXQgbWF5IGJlIHJlcXVpcmVkIHRvIHJ1biBtdWx0aXBsZSB0aW1lcyBiZWZvcmUgaXRcbiAqIHN1Y2Nlc3NmdWxseSBjb21wbGV0ZXMuICBDYXJlIG11c3QgYmUgdGFrZW4gdG8gbWFrZSBzdXJlIHRoaXMgd2lsbCBub3RcbiAqIGJyZWFrIHRoZSBjbGllbnQgZW52aXJvbm1lbnQuXG4gKlxuICogVHJhbnNhY3Rpb25zIGFyZSBhY3F1aXJlZCBieSBjYWxsaW5nIHtAbGluayBDb25uZWN0aW9uI3RyYW5zYWN0fS5cbiAqL1xuY2xhc3MgVHJhbnNhY3Rpb24ge1xuXG5cdC8qKiBAcHJpdmF0ZSAqL1xuXHRjb25zdHJ1Y3Rvcihjb25uZWN0aW9uLCB0eG5Gbiwgb25TdWNjZXNzLCBvbkZhaWwsIHBhcmVudENhY2hlKSB7XG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5vblN1Y2Nlc3MgPSBvblN1Y2Nlc3M7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLm9uRmFpbCA9IG9uRmFpbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuc2hvdWxkUmV0cnkgPSBmYWxzZVxuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJvb3RzIHRoYXQgdGhpcyBjbGllbnQgaGFzIGFjY2VzcyB0by5cblx0XHQgKiBAdHlwZSB7e3N0cmluZzogUmVmfX1cblx0XHQgKi9cblx0XHR0aGlzLnJvb3RzID0gY29ubmVjdGlvbi5yb290c1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5mbiA9IHR4bkZuXG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLmNvbm5lY3Rpb24gPSBjb25uZWN0aW9uXG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLnBhcmVudENhY2hlID0gcGFyZW50Q2FjaGVcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuY2FjaGUgPSBwYXJlbnRDYWNoZS5nZXRUZW1wb3JhcnlWaWV3KClcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWFkcyB0aGUgdmFsdWUgYW5kIHJlZmVyZW5jZXMgZnJvbSBhbiBvYmplY3QgcG9pbnRlZCB0byBieSBhIFJlZi5cblx0ICogQHBhcmFtIHtSZWZ9IHJlZiBhIHJlZmVyZW5jZSB0byB0aGUgb2JqZWN0IHRvIHJlYWQgZnJvbS5cblx0ICogQHJldHVybnMge3t2YWx1ZTpBcnJheUJ1ZmZlciwgcmVmczpSZWZbXX19XG5cdCAqIEB0aHJvd3Mge0NhcGFiaWxpdHlEZW5pZWR9IGlmIHJlZiBkb2VzIG5vdCBoYXZlIHJlYWQgY2FwYWJpbGl0eS5cblx0ICogQHRocm93cyB7VHJhbnNhY3Rpb25SZXRyeU5lZWRlZH0gaWYgdGhlIG9iamVjdCBpcyBub3QgaW4gY2FjaGUuIERvIG5vdCBjYXRjaCB0aGlzIHdpdGhvdXQgcmV0aHJvd2luZyBpdC5cblx0ICovXG5cdHJlYWQocmVmKSB7XG5cdFx0aWYgKHJlZiBpbnN0YW5jZW9mIFJlZiA9PSBmYWxzZSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgQ2FuIG9ubHkgcmVhZCBhIHJlZmVyZW5jZTsgeW91IHRyaWVkIHRvIHJlYWQgZnJvbSAke1N0cmluZyhyZWYpfWApXG5cdFx0fVxuXHRcdGlmICghcmVmLnJlYWQpIHtcblx0XHRcdHRocm93IG5ldyBDYXBhYmlsaXR5RGVuaWVkKGBVbmFibGUgdG8gcmVhZCB1c2luZyByZWZlcmVuY2UgJHtyZWYudG9TdHJpbmcoKX0sIGFzIGl0IGRvZXNuJ3QgYWxsb3cgcmVhZHMuYClcblx0XHR9XG5cdFx0Y29uc3QgaWQgPSByZWYudmFySWRcblx0XHRjb25zdCBjYWNoZUVudHJ5ID0gdGhpcy5jYWNoZS5nZXQoaWQpXG5cdFx0cmV0dXJuIGNhY2hlRW50cnkucmVhZCgpXG5cdH1cblxuXHQvKipcblx0ICogQ2hhbmdlcyB0aGUgdmFsdWUgYW4gZHJlZmVyZW5jZXMgb2YgYW4gb2JqZWN0IHBvaW50ZWQgdG8gYnkgYSBSZWYuXG5cdCAqIEBwYXJhbSB7UmVmfSByZWYgYSByZWZlcmVuY2UgdG8gdGhlIG9iamVjdCB0byBiZSB3cml0dGVuLlxuXHQgKiBAcGFyYW0ge0FycmF5QnVmZmVyfEJ1ZmZlcnxUeXBlZEFycmF5fSB2YWx1ZSB0aGUgbmV3IHZhbHVlIHRvIGJlIHN0b3JlZCBpbiB0aGUgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge1JlZltdfSByZWZzIHRoZSByZWZlcmVuY2VzIGZyb20gdGhpcyBvYmplY3QgdG8gb3RoZXIgb2JqZWN0cy5cblx0ICovXG5cdHdyaXRlKHJlZiwgdmFsdWUsIHJlZnMpIHtcblx0XHRpZiAocmVmIGluc3RhbmNlb2YgUmVmID09IGZhbHNlKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW4gb25seSB3cml0ZSB3aXRoIGEgcmVmZXJlbmNlOyB5b3UgdHJpZWQgdG8gd3JpdGUgdG8gJHtTdHJpbmcocmVmKX0uYClcblx0XHR9XG5cdFx0aWYgKCFyZWYud3JpdGUpIHtcblx0XHRcdHRocm93IG5ldyBDYXBhYmlsaXR5RGVuaWVkKGBVbmFibGUgdG8gd3JpdGUgdXNpbmcgcmVmZXJlbmNlICR7cmVmLnRvU3RyaW5nKCl9LCBhcyBpdCBkb2Vzbid0IGFsbG93IHdyaXRlcy5gKVxuXHRcdH1cblx0XHR2YWx1ZSA9IHRvQXJyYXlCdWZmZXIodmFsdWUpXG5cdFx0Y29uc3QgaWQgPSByZWYudmFySWRcblx0XHRjb25zdCBjYWNoZUVudHJ5ID0gdGhpcy5jYWNoZS5nZXQoaWQpXG5cdFx0Y2FjaGVFbnRyeS53cml0ZSh2YWx1ZSwgcmVmcylcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCBhbmQgcmV0dXJucyB0aGUgcmVmZXJlbmNlIHRvIGl0LlxuXHQgKiBAcGFyYW0ge0FycmF5QnVmZmVyfEJ1ZmZlcnxUeXBlZEFycmF5fSB2YWx1ZSB0aGUgdmFsdWUgdGhhdCB0aGUgbmV3IG9iamVjdCB3aWxsIGJlIGNyZWF0ZWQgd2l0aC5cblx0ICogQHBhcmFtIHtSZWZbXX0gcmVmcyB0aGUgcmVmZXJlbmNlcyB0aGF0IHRoZSBuZXcgb2JqZWN0IHdpbGwgYmUgY3JlYXRlZCB3aXRoLiAgVGhpcyB3aWxsIGRlZmF1bHQgdG8gdGhlIGVtcHR5IGFycmF5LlxuXHQgKiBAcmV0dXJucyB7UmVmfSBhIHJlZmVyZW5jZSB0byB0aGUgbmV3bHkgY3JlYXRlZCBvYmplY3QuXG5cdCAqL1xuXHRjcmVhdGUodmFsdWUsIHJlZnMgPSBbXSkge1xuXHRcdHZhbHVlID0gdG9BcnJheUJ1ZmZlcih2YWx1ZSlcblx0XHRjb25zdCBuZXdJZCA9IHRoaXMuY29ubmVjdGlvbi5nZXROZXdPYmplY3RJZCgpXG5cdFx0Y29uc3QgY2FjaGVFbnRyeSA9IHRoaXMuY2FjaGUuZ2V0KG5ld0lkKVxuXHRcdGNhY2hlRW50cnkuY3JlYXRlKHZhbHVlLCByZWZzKVxuXHRcdHJldHVybiBuZXcgUmVmKG5ldyBVaW50OEFycmF5KG5ld0lkKSwgdHJ1ZSwgdHJ1ZSlcblx0fVxuXG5cdC8qKlxuXHQgKiBTdG9wcyB0aGUgY3VycmVudCB0cmFuc2FjdGlvbiwgYW5kIHdhaXRzIGZvciBhbnkgb2YgdGhlIHZhbHVlcyB0aGF0IGhhdmUgYmVlblxuXHQgKiByZWFkIHRvIGNoYW5nZSBiZWZvcmUgcmVydW5uaW5nLiAgTm8gZnVydGhlciB0cmFuc2FjdGlvbnMgd2lsbCBiZSBwcm9jZXNzZWQgd2hpbGVcblx0ICogYSB0cmFuc2FjdGlvbiBpcyB3YWl0aW5nLlxuXHQgKlxuXHQgKiBJbnRlcm5hbGx5LCB0aGlzIG1ldGhvZCB0aHJvd3MgYSBUcmFuc2FjdGlvblJldHJ5TmVlZGVkIGVycm9yLiAgSWYgeW91IGNhdGNoIGl0XG5cdCAqIGFuZCBkbyBub3QgcmV0aHJvdyBpdCwgeW91IHdpbGwgc3RvcCB0aGUgcmV0cnkgYmVoYXZpb3VyIGZyb20gd29ya2luZy5cblx0ICpcblx0ICogQHRocm93cyB7VHJhbnNhY3Rpb25SZXRyeU5lZWRlZH1cblx0ICovXG5cdHJldHJ5KCkge1xuXHRcdHRoaXMuc2hvdWxkUmV0cnkgPSB0cnVlXG5cdFx0dGhyb3cgbmV3IFRyYW5zYWN0aW9uUmV0cnlOZWVkZWQoXCJUcmFuc2FjdGlvbiBjb2RlIGNhbGxlZCByZXRyeS5cIilcblx0fVxuXG5cdC8qKlxuXHQgKiBSdW5zIGEgbmVzdGVkIHRyYW5zYWN0aW9uIGluc2lkZSB0aGlzIHRyYW5zYWN0aW9uLlxuXHQgKlxuXHQgKiBJZiBhIG5lc3RlZCB0cmFuc2FjdGlvbiBmYWlscywgaXRzIG1vZGlmaWNhdGlvbnMgd2lsbCBub3QgYmUgc2VlbiBieSB0aGUgcGFyZW50IHRyYW5zYWN0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiB0aGUgdHJhbnNhY3Rpb24gZnVuY3Rpb24uICBUaGlzIGZ1bmN0aW9uIG1heSBiZSBydW4gbXVsdGlwbGUgdGltZXMgYW5kIHNob3VsZCByZXRocm93IGFueSBUcmFuc2FjdGlvblJldHJ5TmVlZGVkIGV4Y2VwdGlvbnMuXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlPCosIEVycm9yPn0gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNhY3Rpb24gZnVuY3Rpb24gb25jZSB0aGUgdHJhbnNhY3Rpb24gc3VibWl0cyBvciBhbiBlcnJvciBpZiBpdCBjYW5ub3QuXG5cdCAqL1xuXHR0cmFuc2FjdChmbikge1xuXHRcdGlmIChmbiBpbnN0YW5jZW9mIEZ1bmN0aW9uID09PSBmYWxzZSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcIlRyYW5zYWN0aW9uIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbi5cIilcblx0XHR9XG5cdFx0Y29uc3QgbmVzdGVkVHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24odGhpcy5jb25uZWN0aW9uLCBmbiwgdGhpcy5vblN1Y2Nlc3MsIHRoaXMub25GYWlsLCB0aGlzLmNhY2hlKVxuXHRcdHRoaXMuY29ubmVjdGlvbi5jdXJyZW50VHJhbnNhY3Rpb24gPSBuZXN0ZWRUcmFuc2FjdGlvblxuXHRcdGxldCByZXN1bHRQcm9taXNlID0gdW5kZWZpbmVkXG5cdFx0dHJ5IHtcblx0XHRcdHJlc3VsdFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoZm4obmVzdGVkVHJhbnNhY3Rpb24pKVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGlmIChlIGluc3RhbmNlb2YgVHJhbnNhY3Rpb25SZXRyeU5lZWRlZCkge1xuXHRcdFx0XHR0aGlzLnNob3VsZFJldHJ5ID0gdHJ1ZVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5jb25uZWN0aW9uLmN1cnJlbnRUcmFuc2FjdGlvbiA9IHRoaXNcblx0XHRcdHRocm93IGVcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0UHJvbWlzZVxuXHRcdFx0LnRoZW4oKHJlc3VsdCkgPT4ge1xuXHRcdFx0XHR0aGlzLmNvbm5lY3Rpb24uY3VycmVudFRyYW5zYWN0aW9uID0gdGhpc1xuXHRcdFx0XHRuZXN0ZWRUcmFuc2FjdGlvbi5wcm9tb3RlQ2FjaGUodW5kZWZpbmVkKVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0XG5cdFx0XHR9KVxuXHR9XG5cblx0Ly8gcHJpdmF0ZSBBUElcblxuXHQvKiogQHByaXZhdGVcblx0ICogUHJlcGFyZXMgdGhpcyB0cmFuc2FjdGlvbiB0byBiZSBydW4gYWdhaW4uKi9cblx0cmVzZXQoKSB7XG5cdFx0dGhpcy5jYWNoZSA9IHRoaXMucGFyZW50Q2FjaGUuZ2V0VGVtcG9yYXJ5VmlldygpXG5cdFx0dGhpcy5zaG91bGRSZXRyeSA9IGZhbHNlXG5cdH1cblxuXHQvKiogQHByaXZhdGVcblx0ICogVGhpcyB0cmFuc2FjdGlvbiBoYXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSwgbm90aWZ5IHRoZSBwYXJlbnQuKi9cblx0cHJvbW90ZUNhY2hlKGZpbmFsVHhuSWQpIHtcblx0XHR0aGlzLmNhY2hlLnByb21vdGUoZmluYWxUeG5JZClcblx0fVxuXG5cdC8qKiBAcHJpdmF0ZSAqL1xuXHR0b01lc3NhZ2UodHhuSWQpIHtcblx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5jYWNoZS5nZXRBY3Rpb25zKHRoaXMuY29ubmVjdGlvbi5uYW1lc3BhY2UpXG5cdFx0cmV0dXJuIHtcblx0XHRcdENsaWVudFR4blN1Ym1pc3Npb246IHtcblx0XHRcdFx0SWQ6IHR4bklkLFxuXHRcdFx0XHRSZXRyeTogdGhpcy5zaG91bGRSZXRyeSxcblx0XHRcdFx0QWN0aW9uczogYWN0aW9uc1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvdHJhbnNhY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 15 */
/***/ function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_15__;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(5)\n\nmodule.exports.binaryToHex = __webpack_require__(0).binaryToHex\nmodule.exports.Uint64 = __webpack_require__(3)\nmodule.exports.errors = __webpack_require__(1)//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9pbmRleC5qcz8yNjQ1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zcmMvZ29zaGF3aycpXG5cbm1vZHVsZS5leHBvcnRzLmJpbmFyeVRvSGV4ID0gcmVxdWlyZSgnLi9zcmMvdXRpbHMnKS5iaW5hcnlUb0hleFxubW9kdWxlLmV4cG9ydHMuVWludDY0ID0gcmVxdWlyZSgnLi9zcmMvdWludDY0Jylcbm1vZHVsZS5leHBvcnRzLmVycm9ycyA9IHJlcXVpcmUoJy4vc3JjL2Vycm9ycycpXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);
});